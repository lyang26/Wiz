<!DOCTYPE HTML><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=unicode">
<title>DTO详细说明</title>
    <!--mark |wiz_custom_css| for wizeditor replace it-->
<link rel="stylesheet"  name="wiz_tmp_editor_style" href="index_files/fonts_693.css"><link type="text/css" rel="stylesheet" id="wiz_code_highlight_link" href="index_files/wiz_code_highlight_168.css"><style id="wiz_custom_css">html, body {            font-size: 15px;        }        body {            font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;            line-height: 1.6;            margin: 0;            padding: 20px 15px;            padding: 1.33rem 1rem;        }        h1, h2, h3, h4, h5, h6 {            margin: 20px 0 10px;            margin: 1.33rem 0 0.667rem;            padding: 0;            font-weight: bold;        }        h1 {            font-size: 21px;            font-size: 1.4rem;        }        h2 {            font-size: 20px;            font-size: 1.33rem;        }        h3 {            font-size: 18px;            font-size: 1.2rem;        }        h4 {            font-size: 17px;            font-size: 1.13rem;        }        h5 {            font-size: 15px;            font-size: 1rem;        }        h6 {            font-size: 15px;            font-size: 1rem;            color: #777777;            margin: 1rem 0;        }        div, p, ul, ol, dl, li {            margin: 0;        }        blockquote, table, pre, code {            margin: 8px 0;        }        ul, ol {            padding-left: 32px;            padding-left: 2.13rem;        }        blockquote {            padding: 0 12px;            padding: 0 0.8rem;        }        blockquote > :first-child {            margin-top: 0;        }        blockquote > :last-child {            margin-bottom: 0;        }        img {            border: 0;            max-width: 100%;            height: auto !important;            margin: 2px 0;        }        table {            border-collapse: collapse;            border: 1px solid #bbbbbb;        }        td, th {            padding: 4px 8px;            border-collapse: collapse;            border: 1px solid #bbbbbb;			        }        @media only screen and (-webkit-max-device-width: 1024px), only screen and (-o-max-device-width: 1024px), only screen and (max-device-width: 1024px), only screen and (-webkit-min-device-pixel-ratio: 3), only screen and (-o-min-device-pixel-ratio: 3), only screen and (min-device-pixel-ratio: 3) {            html, body {                font-size: 17px;            }            body {                line-height: 1.7;                padding: 0.75rem 0.9375rem;                color: #353c47;            }            h1 {                font-size: 2.125rem;            }            h2 {                font-size: 1.875rem;            }            h3 {                font-size: 1.625rem;            }            h4 {                font-size: 1.375rem;            }            h5 {                font-size: 1.125rem;            }            h6 {                color: inherit;            }            ul, ol {                padding-left: 2.5rem;            }            blockquote {                padding: 0 0.9375rem;            }        }</style><style id="wiz_tmp_editor_style" wiz_style= "unsave">html, body {    font-size: 15px;}body {    font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;    line-height: 1.6;    color: ;    background-color: ;    margin: 0;    padding: 20px 15px;    padding: 1.33rem 1rem;}img{    max-width: 100%;}</style><script type="text/javascript" src="file:///D:\WizNote\WizTools\htmleditor\utils.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///D:\WizNote\WizTools\htmleditor\localize.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///D:\WizNote\WizTools\htmleditor\core\wizEditorForPc.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///D:\WizNote\WizTools\htmleditor\editorHelper.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///D:\Wizs\templates\WizTemplate.js" wiz_style="unsave" charset="utf-8"></script></head>

<body spellcheck="false" ><h3 style="margin-top: 0px; margin-bottom: 0px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-size: 1.2em; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; background-color: rgb(255, 255, 255);"><span style="font-size: 14px; font-variant-ligatures: normal; font-weight: normal;"><ol style="font-family: Arial, Console, Verdana, 'Courier New'; font-size: 12px; font-variant-ligatures: normal; margin-left: 14px; padding-left: 14px; line-height: 19.2px;"><li><a href="http://blog.csdn.net/dchjmichael/article/details/7905766#t0" style="color: rgb(202, 0, 0); text-decoration: none;">101&nbsp; 什么是DTO</a></li><li><a href="http://blog.csdn.net/dchjmichael/article/details/7905766#t1" style="color: rgb(202, 0, 0); text-decoration: none;">102&nbsp; 域DTO</a></li><li><a href="http://blog.csdn.net/dchjmichael/article/details/7905766#t2" style="color: rgb(202, 0, 0); text-decoration: none;">103&nbsp; 定制DTO</a></li><li><a href="http://blog.csdn.net/dchjmichael/article/details/7905766#t3" style="color: rgb(202, 0, 0); text-decoration: none;">104&nbsp; 数据传送哈希表</a></li><li><a href="http://blog.csdn.net/dchjmichael/article/details/7905766#t4" style="color: rgb(202, 0, 0); text-decoration: none;">105&nbsp; 数据传送行集</a></li><li><a href="http://blog.csdn.net/dchjmichael/article/details/7905766#t5" style="color: rgb(202, 0, 0); text-decoration: none;">106&nbsp; 案例系统的层间数据传输</a></li><li><a href="http://blog.csdn.net/dchjmichael/article/details/7905766#t6" style="color: rgb(202, 0, 0); text-decoration: none;">107&nbsp; DTO生成器</a></li></ol></span></h3><h3 style="margin-top: 0px; margin-bottom: 0px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-size: 1.2em; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; background-color: rgb(255, 255, 255);"><span style="font-size: 14px; font-variant-ligatures: normal; font-weight: normal;">层间数据传输的过程就是服务的执行者将数据返回给服务的调用者的过程。在非分布式系统中由于有类似Open session in view这样的“怪胎解决方案”的存在，所以层间数据传输的问题并没有充分暴露出来，但是在分布式系统中我们就能清楚地意识到层间数据传输的问题，从而能 够更合理的进行设计。为了暴露更多问题，本章讨论的层间数据传输假定的场景是“服务器将执行的数据结果如何传递给远程客户端”，尽管在实际场景中服务的提 供者和服务的调用者有可能处于同一虚拟机中(比如Web端与应用服务部署在同一服务器中)。</span><br></h3><h3 style="margin-top: 0px; margin-bottom: 0px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-size: 1.2em; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; background-color: rgb(255, 255, 255);">10.1&nbsp; 什么是DTO</h3><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">在分布式系统中，客户端和服务器端交互有两种情形：第一个是客户端从服务器端读取数据；第二个是客户端将本身的数据传递给服务器端。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">当有客户端要向服务器端传输大量数据的时候，可以通过一个包含要传输的所有数据的方法调用来完成。这在小数据量的时候缺点并不明显，但是如果要传递包含有大量信息的数据的时候，这将变得难以忍受。下面的方法是任何人看了都会害怕的：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">public void save(String id,String number,String name,int type,int height,</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">int width,BigDecimal weight,BigDecimal price,String description)</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">这种接口也是非常的脆弱，一旦需要添加或者删除某个属性，方法的签名就要改变。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">当客户端要从服务器端取得大量数据的时候，可以使用多个细粒度的对服务器端的调用来获取数据。比如：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">ISomeInterface intf = RemoteService.getSomeInterface();</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("您要查询的商品的资料为:");</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("编号："+intf.getNumber(id));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("姓名："+intf.getName(id));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("类型："+intf.getType(id));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("高度："+intf.getHeight(id));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("宽度："+intf.getWidth(id));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("价格："+intf.getPrice(id));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("描述信息："+intf.getDescription(id));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">这种方式中每一个get***方法都是一个对服务器 的远程调用，都需要对参数和返回值进行序列化和反序列化，而且服务器进行这些调用的时候还需要进行事务、权限、日志的处理，这会造成性能的大幅下降。如果 没有使用客户端事务的话还会导致这些调用不在一个事务中从而导致数据错误。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">系统需要一种在客户端和服务器端之间高效、安全地进 行数据传输的技术。DTO(Data Transfer Object，数据传送对象)是解决这个问题的比较好的方式。DTO是一个普通的<a href="http://lib.csdn.net/base/javase" class="replace_word" title="Java SE知识库" target="_blank" style="color: rgb(223, 52, 52); text-decoration: none; font-weight: bold;">Java</a>类，它封装了要传送的批量的数据。当客户端需要读取服务器端的数 据的时候，服务器端将数据封装在DTO中，这样客户端就可以在一个网络调用中获得它需要的所有数据。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">还是上面的例子，服务器端的服务将创建一个DTO并封装客户端所需要的属性，然后返回给客户端：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">ISomeInterface intf = RemoteService.getSomeInterface();</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">SomeDTOInfo info = intf.getSomeData(id);</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("您要查询的商品的资料为:");</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("编号："+info.getNumber());</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("姓名："+info.getName());</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("类型："+info.getType());</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("高度："+info.getHeight());</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("宽度："+info.getWidth());</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("价格："+info.getPrice());</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("描述信息："+info.getDescription());</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">使用DTO 的时候，一个主要问题是选择什么样的DTO：这个DTO能够容纳哪些数据，DTO的结构是什么，这个DTO是如何产生的。DTO是服务器端和客户端进行通 信的一个协议格式，合理的DTO设计将会使得服务器和客户端的通信更加顺畅。在水平开发模式(即每个开发人员负责系统的不同层，A专门负责Web表现层的 开发，B专门负责服务层的开发)中，在项目初期合理的DTO设计会减少各层开发人员之间的纠纷；在垂直开发模式(即每个开发人员负责不同模块的所有层，A 专门负责库存管理模块的开发，B专门负责固定资产模块的开发)中，虽然开发人员可以自由地调整DTO的结构，但是合理的DTO设计仍然会减少返工的可能 性。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">实现DTO 最简单的方法是将服务端的域对象(比如<a href="http://lib.csdn.net/base/javaee" class="replace_word" title="Java EE知识库" target="_blank" style="color: rgb(223, 52, 52); text-decoration: none; font-weight: bold;">hibernate</a>中的PO、EJB中的实体Bean)进行拷贝然后作为DTO传递。采用域对象做DTO比较简单和 清晰，因为DTO与域模型一致，所以了解一个结构就够了。这样做也免去了DTO的设计，使得开发工作变得更快。这种做法的缺点是域DTO的粒度太大以至于 难以满足客户端的细粒度的要求，客户端可能不需要访问那些域中的所有属性，也可能需要不是简单地被封装在域中的数据，当域DTO不能满足要求的时候就需要 更加细粒度的DTO方案。目前主流的DTO解决方案有定制DTO、数据传送哈希表、数据传送行集。</p><h3 style="margin-top: 0px; margin-bottom: 0px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-size: 1.2em; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; background-color: rgb(255, 255, 255);"><a name="t1" style="color: rgb(202, 0, 0);"></a>10.2&nbsp; 域DTO</h3><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">域模型是指从业务模型中抽取出来的对象模型，比如商品、仓库。在J2EE中，最常见的域模型就是可持久化对象，比如Hibernate中的PO、EJB中的实体Bean。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">在分布式系统中，域模型完全位于服务器端。根据持久 化对象可否直接传递到客户端，域对象可以分为两种类型：一种是服务器端的持久化对象不可以直接传递到客户端，比如EJB中的实体Bean是不能被传递到客 户端的；一种是持久化对象可以直接传递到客户端，比如Hibernate中的PO变为detached object以后就可以传递到客户端。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">EJB中的实体Bean不能直接传递到客户端，而且实体Bean不是一个简单的JavaBean，所以也不能通过深度克隆(deep clone)创造一个新的可传递Bean的方式产生DTO。针对这种情况，必须编写一个简单的JavaBean来作为DTO。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">下面是一个系统用户的实体Bean的代码：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="kwd">abstract</span><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SystemUserBean</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">EntityBean</span></code></li><li class="L1"><code class="language-java"><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="typ">EntityContext</span><span class="pln"> entityContext</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">String</span><span class="pln"> ejbCreate</span><span class="pun">(</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">String</span><span class="pln"> userId</span><span class="pun">)</span></code></li><li class="L4"><code class="language-java"><span class="pln">            </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">CreateException</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L6"><code class="language-java"><span class="pln">        setUserId</span><span class="pun">(</span><span class="pln">userId</span><span class="pun">);</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> ejbPostCreate</span><span class="pun">(</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">String</span><span class="pln"> userId</span><span class="pun">)</span><span class="pln"> </span></code></li><li class="L0"><code class="language-java"><span class="pln">            </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">CreateException</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="pun">{</span><span class="pln">      </span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> ejbRemove</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">RemoveException</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="pun">{</span><span class="pln">      </span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">abstract</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setUserId</span><span class="pun">(</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">String</span><span class="pln"> userId</span><span class="pun">);</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">abstract</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setName</span><span class="pun">(</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">String</span><span class="pln"> name</span><span class="pun">);</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">abstract</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setPassword</span><span class="pun">(</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">String</span><span class="pln"> password</span><span class="pun">);</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">abstract</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setRole</span><span class="pun">(</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">Integer</span><span class="pln"> role</span><span class="pun">);</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">abstract</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">String</span><span class="pln"> getUserId</span><span class="pun">();</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">abstract</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">String</span><span class="pln"> getName</span><span class="pun">();</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">abstract</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">String</span><span class="pln"> getPassword</span><span class="pun">();</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">abstract</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">Integer</span><span class="pln"> getRole</span><span class="pun">();</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> ejbLoad</span><span class="pun">()</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="pun">{</span><span class="pln">      </span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> ejbStore</span><span class="pun">()</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="pun">{</span><span class="pln">      </span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> ejbActivate</span><span class="pun">()</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="pun">{</span><span class="pln">      </span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> ejbPassivate</span><span class="pun">()</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="pun">{</span><span class="pln">      </span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> unsetEntityContext</span><span class="pun">()</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">entityContext </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setEntityContext</span><span class="pun">(</span><span class="typ">EntityContext</span><span class="pln"> entityContext</span><span class="pun">)</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">entityContext </span><span class="pun">=</span><span class="pln"> entityContext</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">根据需要我们设计了如下的DTO：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SystemUserDto</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Serializable</span></code></li><li class="L1"><code class="language-java"><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> userId</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> name</span><span class="pun">;</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> password</span><span class="pun">;</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> role</span><span class="pun">;</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setUserId</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> userId</span><span class="pun">)</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">userId </span><span class="pun">=</span><span class="pln"> userId</span><span class="pun">;</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getUserId</span><span class="pun">()</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> userId</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setName</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> name</span><span class="pun">)</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">name </span><span class="pun">=</span><span class="pln"> name</span><span class="pun">;</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getName</span><span class="pun">()</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> name</span><span class="pun">;</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setPassword</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> password</span><span class="pun">)</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">password </span><span class="pun">=</span><span class="pln"> password</span><span class="pun">;</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getPassword</span><span class="pun">()</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> password</span><span class="pun">;</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setRole</span><span class="pun">(</span><span class="typ">Integer</span><span class="pln"> role</span><span class="pun">)</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">role </span><span class="pun">=</span><span class="pln"> role</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> getRole</span><span class="pun">()</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> role</span><span class="pun">;</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">为了实现DTO的生成，这里还需要一个将实体Bean转换为一个DTO的工具，我们称其为DTOAssembler：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SystemUserDtoAssembler</span></code></li><li class="L1"><code class="language-java"><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">SystemUserDto</span><span class="pln"> createDto</span><span class="pun">(</span><span class="typ">SystemUser</span><span class="pln"> systemUser</span><span class="pun">)</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="typ">SystemUserDto</span><span class="pln"> systemUserDto </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SystemUserDto</span><span class="pun">();</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">systemUser </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">            systemUserDto</span><span class="pun">.</span><span class="pln">setUserId</span><span class="pun">(</span><span class="pln">systemUser</span><span class="pun">.</span><span class="pln">getUserId</span><span class="pun">());</span></code></li><li class="L8"><code class="language-java"><span class="pln">            systemUserDto</span><span class="pun">.</span><span class="pln">setName</span><span class="pun">(</span><span class="pln">systemUser</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">());</span></code></li><li class="L9"><code class="language-java"><span class="pln">            systemUserDto</span><span class="pun">.</span><span class="pln">setPassword</span><span class="pun">(</span><span class="pln">systemUser</span><span class="pun">.</span><span class="pln">getPassword</span><span class="pun">());</span></code></li><li class="L0"><code class="language-java"><span class="pln">            systemUserDto</span><span class="pun">.</span><span class="pln">setRole</span><span class="pun">(</span><span class="pln">systemUser</span><span class="pun">.</span><span class="pln">getRole</span><span class="pun">());</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> systemUserDto</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">SystemUserDto</span><span class="pun">[]</span><span class="pln"> createDtos</span><span class="pun">(</span><span class="typ">Collection</span><span class="pln"> systemUsers</span><span class="pun">)</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="typ">List</span><span class="pln"> list </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArrayList</span><span class="pun">();</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">systemUsers </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">            </span><span class="typ">Iterator</span><span class="pln"> iterator </span><span class="pun">=</span><span class="pln"> systemUsers</span><span class="pun">.</span><span class="pln">iterator</span><span class="pun">();</span></code></li><li class="L0"><code class="language-java"><span class="pln">            </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">iterator</span><span class="pun">.</span><span class="pln">hasNext</span><span class="pun">())</span></code></li><li class="L1"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">                list</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="pln">createDto</span><span class="pun">((</span><span class="typ">SystemUser</span><span class="pun">)</span><span class="pln"> iterator</span><span class="pun">.</span><span class="pln">next</span><span class="pun">()));</span></code></li><li class="L3"><code class="language-java"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="typ">SystemUserDto</span><span class="pun">[]</span><span class="pln"> returnArray </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SystemUserDto</span><span class="pun">[</span><span class="pln">list</span><span class="pun">.</span><span class="pln">size</span><span class="pun">()];</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="typ">SystemUserDto</span><span class="pun">[])</span><span class="pln"> list</span><span class="pun">.</span><span class="pln">toArray</span><span class="pun">(</span><span class="pln">returnArray</span><span class="pun">);</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">为一个实体Bean产生DTO是非常麻烦的事情，所以像JBuilder这样的IDE都提供了根据实体Bean直接生成DTO类和DTOAssembler的代码生成器。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">相对于重量级的实体Bean来说，使用 Hibernate的开发人员则轻松多了，因为Hibernate中的PO就是一个普通的JavaBean对象，而且PO可以随时脱离Hibernate 被传递到客户端，不用进行复杂的DTO和DTOAssembler的开发。不过缺点也是有的，当一个PO脱离Hibernate以后如果客户端访问其并没 有在服务器端加载的属性的时候就会抛出惰性加载的异常，而如果对PO不采用惰性加载的话则会导致Hibernate将此PO直接或者间接关联的对象都取出 来的问题，在有的情况下这是灾难性的。在案例系统中是使用DTOGenerator的方式来解决这种问题的。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">无论是哪种方式，客户端都不能直接访问服务器端的域 模型，但是客户端却希望能和域模型进行协作，因此需要一种机制来允许客户端像操纵域模型一样操作DTO，这样客户端可以对DTO进行读取、更新的操作，就 好像对域模型做了同样的操作一样。客户端对DTO进行新增、修改、删除等操作，然后将修改后的DTO传回服务器端由服务器对其进行处理。对于实体Bean 来讲，如果要处理从客户端传递过来的DTO，就必须编写一个DTODisassembler来将DTO解析为实体Bean：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SystemUserDtoDisassembler</span></code></li><li class="L1"><code class="language-java"><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">SystemUser</span><span class="pln"> fromDto</span><span class="pun">(</span><span class="typ">SystemUserDto</span><span class="pln"> aDto</span><span class="pun">)</span></code></li><li class="L3"><code class="language-java"><span class="pln">            </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">ServiceLocatorException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">CreateException</span><span class="pun">,</span></code></li><li class="L4"><code class="language-java"><span class="pln">            </span><span class="typ">FinderException</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="typ">SystemUser</span><span class="pln"> systemUser </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="typ">ServiceLocator</span><span class="pln"> serviceLoc </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ServiceLocator</span><span class="pun">.</span><span class="pln">getInstance</span><span class="pun">();</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="typ">SystemUserHome</span><span class="pln"> systemUserHome </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">SystemUserHome</span><span class="pun">)</span><span class="pln"> serviceLoc</span></code></li><li class="L9"><code class="language-java"><span class="pln">                </span><span class="pun">.</span><span class="pln">getEjbLocalHome</span><span class="pun">(</span><span class="str">"SystemUserHome"</span><span class="pun">);</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="kwd">boolean</span><span class="pln"> bFind </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="kwd">try</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">            systemUser </span><span class="pun">=</span><span class="pln"> systemUserHome</span><span class="pun">.</span><span class="pln">findByPrimaryKey</span><span class="pun">(</span><span class="pln">aDto</span><span class="pun">.</span><span class="pln">getPkId</span><span class="pun">());</span></code></li><li class="L4"><code class="language-java"><span class="pln">            bFind </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">systemUser </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">);</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">FinderException</span><span class="pln"> fe</span><span class="pun">)</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">            bFind </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">bFind </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)</span></code></li><li class="L0"><code class="language-java"><span class="pln">            systemUser </span><span class="pun">=</span><span class="pln"> systemUserHome</span><span class="pun">.</span><span class="pln">create</span><span class="pun">(</span><span class="pln">aDto</span><span class="pun">.</span><span class="pln">getPkId</span><span class="pun">());</span></code></li><li class="L1"><code class="language-java"><span class="pln">        systemUser</span><span class="pun">.</span><span class="pln">setName</span><span class="pun">(</span><span class="pln">aDto</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">());</span></code></li><li class="L2"><code class="language-java"><span class="pln">        systemUser</span><span class="pun">.</span><span class="pln">setPassword</span><span class="pun">(</span><span class="pln">aDto</span><span class="pun">.</span><span class="pln">getPassword</span><span class="pun">());</span></code></li><li class="L3"><code class="language-java"><span class="pln">        systemUser</span><span class="pun">.</span><span class="pln">setRole</span><span class="pun">(</span><span class="pln">aDto</span><span class="pun">.</span><span class="pln">getRole</span><span class="pun">());</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> systemUser</span><span class="pun">;</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">Hibernate在这方面的处理就又比实体Bean简单了，主要把从客户端传来的DTO重新纳入Hibernate的管理即可，唯一需要注意的就是版本问题。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">(1)&nbsp;&nbsp; 使用域DTO会有如下好处：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 域模型结构可以在一次网络调用中复制到客户端，客户端可以读取、更新这个DTO而不需要额外的网络调用开销，而且客户端还可以通过将更新后的DTO回传到服务器端以更新数据。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 易于实现快速开发。通过使用域DTO可以直接将域模型在层间传输，减少了工作量，可以快速地构建出一个应用。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">(2)&nbsp;&nbsp; 但它也有如下的缺点：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 将客户端和服务器端域对象耦合在一起。如果域模型变了，那么相应的DTO也会改变，即使对于Hibernate这种PO、DTO一体的系统来说也会同样导致客户端的代码要重新编译或者修改。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 不能很好地满足客户端的要求。客户端可能只需要域对象的20个属性中的一两个，采用域DTO则会将20个属性都传递到客户端，浪费了网络资源。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 更新域对象很烦琐。客户端对DTO可能做了很多更新或者很深层次的更新，要探查这些更新然后更新域对象是很麻烦的事情。</p><br style="font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><h3 style="margin-top: 0px; margin-bottom: 0px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-size: 1.2em; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; background-color: rgb(255, 255, 255);"><a name="t2" style="color: rgb(202, 0, 0);"></a>10.3&nbsp; 定制DTO</h3><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">域DTO解决了在客户端和服务器端之间传递大量数据的问题，但是客户端往往需要更细粒度的数据访问。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">例如，一件商品可能有很多属性：名称、编码、重量、型号、大小、颜色、生产日期、生产厂家、批次、保质期等。而客户端只对其中一部分属性有要求，如果将包含所有属性的商品对象到客户端的话，将会即浪费时间又浪费网络带宽，并对系统的性能有不同程度的影响。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">我们需要一种可定制的DTO，使它仅封装客户端需要的数据的任意组合，完全与服务器端的域模型相分离。定制DTO与域DTO的区别就是它不映射到任何服务器端的域模型。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">从上述的商品例子，设想客户端只需要一些与产品质量有关的属性，在这种情况下，应该创造一个封装了这些特定属性的DTO并传送给客户端。这个DTO是商品属性的一个子集：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">GoodsCustomDTO</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Serializable</span></code></li><li class="L1"><code class="language-java"><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Date</span><span class="pln"> productDate</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Date</span><span class="pln"> expireDate</span><span class="pun">;</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> batchNumber</span><span class="pun">;</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">GoodsCustomDTO</span><span class="pun">(</span><span class="typ">Date</span><span class="pln"> productDate</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Date</span><span class="pln"> expireDate</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> </span></code></li><li class="L6"><code class="language-java"><span class="pln">            batchNumber</span><span class="pun">)</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="kwd">super</span><span class="pun">();</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">productDate </span><span class="pun">=</span><span class="pln"> productDate</span><span class="pun">;</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">expireDate </span><span class="pun">=</span><span class="pln"> expireDate</span><span class="pun">;</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">batchNumber </span><span class="pun">=</span><span class="pln"> batchNumber</span><span class="pun">;</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getBatchNumber</span><span class="pun">()</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> batchNumber</span><span class="pun">;</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Date</span><span class="pln"> getExpireDate</span><span class="pun">()</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> expireDate</span><span class="pun">;</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Date</span><span class="pln"> getProductDate</span><span class="pun">()</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> productDate</span><span class="pun">;</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">一般来说，如果客户端需要n个属性，那么应该创造一 个包含且仅包含这n个属性的DTO。使用这种方法，域模型的细节被隐藏在服务器中。这样开发人员把DTO仅当做普通的数据，而不是任何像PO那样的服务端 的业务数据。当然采用定制DTO系统中会有越来越多的DTO，所以很多开发者情愿使用粗糙一些的DTO(即包含比需要的属性多的属性)，而不是重新编写一 个新的DTO，只要是返回的冗余数据不是太多，还是可以接受的。毕竟对于任何一种技术，都需要寻求一个兼顾方便和性能的折衷点。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">定制DTO主要用于只读操作，也就是DTO只能用来显示，而不能接受改变。既然定制DTO对象仅仅是一个数据的集合，和任何服务端对象没有必然的关系，那么对定制DTO进行更新就是没有意义的了。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">定制DTO的缺点如下：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 需要创建大量的DTO。使用定制DTO会爆炸式地产生大量的对象。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 客户端DTO的版本必须和服务器端的版本一致。由于客户端和服务器端都通过定制DTO通信，所以一旦服务器端的DTO增加了字段，那么客户端的代码也必须重新编译，否则会产生类版本不一致的问题。</p><h3 style="margin-top: 0px; margin-bottom: 0px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-size: 1.2em; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; background-color: rgb(255, 255, 255);"><a name="t3" style="color: rgb(202, 0, 0);"></a>10.4&nbsp; 数据传送哈希表</h3><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">使用定制DTO可以解决域DTO的数据冗余等问题，但是我们需要编写大量的DTO以便返回给客户端它们所需要的数据，但是仍然有对象骤增、代码版本等问题。解决这一问题的方法就是使用数据传送哈希表。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">JDK中的哈希表(HashMap、HashTable等)提供了一种通用的、可序列化的、可容纳任意数据集合的容器。若使用哈希表作为DTO客户端和服务器端代码之间数据传送载体的话，唯一的依赖关系就是置于键中用于表示属性的命名。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">比如：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">ISomeInterface intf = RemoteService.getSomeInterface();</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">Map info = intf.getSomeData(id);</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("您要查询的商品的资料为:");</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("编号："+info.get("Number"));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("姓名："+info.get("Name"));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("类型："+info.get("Type"));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("高度："+info.get("Height"));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("宽度："+info.get("Width"));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println("价格："+info.get("Price"));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">使用数据传送哈希表而不是域DTO或者定制DTO意味着增加了额外的实现复杂性，因为客户端需要知道作为键的字符串，以便在哈希表中取得感兴趣的属性。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">(1)&nbsp;&nbsp; 使用数据传送哈希表来进行数据传递的好处在于：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 有很好的可维护性。不必像定制DTO那样需要额外的类和重复的逻辑，取而代之的是通用的哈希表访问。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 维护代价低。无须任何服务器端编程就可以创建新的服务器端数据的视图，这样客户端可以动态地决定需要哪些数据。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">(2)&nbsp;&nbsp; 当然它也是有缺点的：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 需要服务器和客户端就键的命名达成一个约定。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 无法使用强类型的编译时检查。当使用定制DTO或者域DTO的时候，传递给set的值或者从get方法得到的值总是正确的，任何错误都能在编译时被发现。 而使用数据传送哈希表时，属性访问的问题只有运行时才能发现，而且读取数据的时候也要进行类型转换，这使得系统性能降低。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 需要对基本类型进行封装。Java中的基本数据类型，比如int、double、boolean等不能保存在哈希表中，因为它们不是对象，所以在放入哈希表之前需要采用Wrapper类封装，不过在JDK 1.5以后的版本中不再存在此问题。</p><h3 style="margin-top: 0px; margin-bottom: 0px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-size: 1.2em; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; background-color: rgb(255, 255, 255);"><a name="t4" style="color: rgb(202, 0, 0);"></a>10.5&nbsp; 数据传送行集</h3><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">当开发报表或者开发<a href="http://lib.csdn.net/base/hadoop" class="replace_word" title="Hadoop知识库" target="_blank" style="color: rgb(223, 52, 52); text-decoration: none; font-weight: bold;">大数据</a>量的客户端的时候，直接用JDBC访问<a href="http://lib.csdn.net/base/mysql" class="replace_word" title="MySQL知识库" target="_blank" style="color: rgb(223, 52, 52); text-decoration: none; font-weight: bold;">数据库</a>是更好的方式，但是如何将查询结果传递给客户端呢？最普通的解决方法是使用DTO。例如，用JDBC查询每种商品的销售总量：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">select sum(saleBillDetail.FQty) as FTotalQty,saleBillDetail.FGoodsName,saleBillDetail.FGoodsNumber as FGoodsName from T_SaleBillDetail as saleBillDetail group by&nbsp; saleBillDetail.FgoodsId</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">我们可以创建一个定制DTO来传送这个查询的结果集：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SomeDTO</span><span class="pln">  </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Serializable</span></code></li><li class="L1"><code class="language-java"><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">BigDecimal</span><span class="pln"> totalQty</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> goodsNumber</span><span class="pun">;</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> goodsName</span><span class="pun">;</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">SomeDTO</span><span class="pln"> </span><span class="pun">(</span><span class="typ">BigDecimal</span><span class="pln"> totalQty</span><span class="pun">,</span><span class="typ">String</span><span class="pln"> goodsNumber</span><span class="pun">,</span><span class="typ">String</span><span class="pln"> goodsName</span><span class="pun">)</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="kwd">super</span><span class="pun">();</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">totalQty </span><span class="pun">=</span><span class="pln"> totalQty</span><span class="pun">;</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">goodsNumber </span><span class="pun">=</span><span class="pln"> goodsNumber</span><span class="pun">;</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">goodsName </span><span class="pun">=</span><span class="pln"> goodsName</span><span class="pun">;</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">BigDecimal</span><span class="pln"> getTotalQty</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> totalQty</span><span class="pun">;</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getGoodsNumber</span><span class="pun">()</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> goodsNumber</span><span class="pun">;</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getGoodsName</span><span class="pun">()</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> goodsName</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">服务器会执行报表SQL语句得到一个包含每种商品销量的结果集，然后服务器将结果集填装DTO，结果集中的每一行都被转换成DTO并加入一个集合中，填装完毕，这个DTO集合就被传递到客户端供客户端显示报表用。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">SQL查询语句是千变万化的，因此对于每种不同的查 询结果都要创建不同的DTO。而且数据已经表示在结果集的数据表的行中，将数据转换到一个对象集合中，然后在客户端又将对象集合转换回由行和列组成的数据 表显然是多余的。使用行集将原始的SQL查询结果从服务器端直接返回给客户端是更好的做法。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">javax.sql.RowSet是 java.sql.ResultSet的子接口，并且在JDBC 3.0中它被作为核心接口取代ResultSet。使用RowSet可以将结果集封装并传递到客户端，由于RowSet是ResultSet的子接口，所 以客户端可以像操纵结果集一样对RowSet进行操作。这允许开发人员将查询结果与数据库相分离，这样就无须手工将结果集转换成DTO然后又在客户端重新 转换为表格形式。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">要将行集传递到客户端，那么这种行集必须是非连接的 行集，也就是行集无须保持与数据库的连接，完全可以脱离数据库环境。Sun提供了一个实现如此功能的缓冲行集(Cached RowSet)，这个实现在Sun JDK 1.5以后的版本中是包含在安装包中的，如果使用其他公司的JDK或者Sun JDK 1.4，则需要单独到Sun的网站上去下载对应的Jar包。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">在商品销售总量报表的例子中，可以用行集获得查询的整个结果集，并将其传递到客户端。为了创建这个行集，可以在服务端编写如下的代码：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">ps = conn.prepareStatement(sql);</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">ResultSet rs = ps.executeQuery();</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">RowSet crs = new CachedRowSet();</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">crs.populate(rs);</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">return crs;</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">这样客户端就可以得到这个RowSet了。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">(1)&nbsp;&nbsp; 用行集作为跨层数据传输的方法的好处是：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 行集对所有查询操作都提供了统一的接口。使用行集，所有的客户端都可以使用相同的接口满足所有的数据查询需要。当客户端要访问的数据发生改变时行集接口是不变的。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 消除了无谓的转换。行集可以直接从SQL执行的结果集中创建，而不用从结果集转换为DTO，再由DTO转换为表格。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">(2)&nbsp;&nbsp; 使用行集的缺点是：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 客户端必须知道查询结果集中列的名字。如果查询SQL是隐藏在服务器端的话，表名、表之间的关系等对客户端是透明的，但是客户端仍然需要知道结果集中列的名字，这样才能获得相关的值。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 直接跳过了域模型。这是一种非面向对象的方式，有悖于基本的J2EE<a href="http://lib.csdn.net/base/architecture" class="replace_word" title="大型网站架构知识库" target="_blank" style="color: rgb(223, 52, 52); text-decoration: none; font-weight: bold;">架构</a>。这和Delphi中的“ClientDataSet伪三层”、.Net中的 “WebService返回DataSet”一样，当使用行集的时候并没有反映出来任何业务的概念，它们只是一堆数据而已。Scott Hanselman说：“从WebService返回DataSet，是撒旦的产物，代表了世界上一切真正邪恶的东西”。采用行集使得客户端与服务器端的 域模型绑定得更加紧密，当需要对系统重构的时候增加了工作量。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 无法使用强类型的编译检查。客户端必须调用行集上的getString、getBoolean、getBigDecimal等方法来获取数据，而不是调用DTO上的getName，getNumber。这使得客户端的开发容易出现在运行时才能发现的错误。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 行集接口定义了可以修改行集数据并与数据库同步的机制，但是开发人员应该避免使用这种手段在客户端更新数据。为了从根本上杜绝这种情况的发生。可以编写一 个子集的行集实现类(或者简单地封装一个CachedRowSet实现)把所有的与数据更新相关的行集操作通过异常等方式屏蔽。</p><h3 style="margin-top: 0px; margin-bottom: 0px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-size: 1.2em; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; background-color: rgb(255, 255, 255);"><a name="t5" style="color: rgb(202, 0, 0);"></a>10.6&nbsp; 案例系统的层间数据传输</h3><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">上面几节比较了常见的层间数据传输模式，这些模式都有各自的优缺点，必须根据实际情况选择合适的模式，绝对不能生搬硬套、人云亦云。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">考虑到系统架构的合理性，很多人都是强调避免将域对 象直接传递到客户端的，因为这样服务端的域模型就暴露给了客户端，造成客户端与服务器端的高度耦合。当域模型修改的时候，就要造成客户端代码的修改或者重 新编写。建议重新建立一个定制DTO类来传输必要的数据，这样DTO与域模型就可以独立变化。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">在大部分业务系统中，很多情况下DTO与域模型是无 法独立变化的，比如客户要求为一个商品增加一个“跟货员”的属性，并且要能在客户端显示、编辑这个属性。这种情况下我们能做到只修改域模型而不修改DTO 吗？如果客户想去掉“批次”属性，那么如果只从域模型中去掉这个属性的话，客户端保留编辑这个属性的控件还有什么意义吗？</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">在大部分业务系统的普通逻辑中客户端界面通常反映的就是域模型，所以没必要进行屏蔽，这样做只能增加无谓的工作量，降低开发效率。案例系统中在大部分情况下可以直接将域模型当做DTO直接传递给客户端，只有在特殊的逻辑中才采用其他的层间数据传输模式。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">前面提到对于EJB我们只能编写一个和实体Bean 含有相同属性的JavaBean作为DTO，而由于Hibernate的强大功能，PO的状态管理可以脱离Session。问题的关键是我们不能把一个脱 了Session管理的PO直接传递到客户端，因为如果不采取LazyLoad的话，我们会把服务器端所有与此PO相关联的对象都传递到客户端，这是任何 人都无法忍受的。而如果采用LazyLoad的话如何取得客户端要的所有数据呢？一个方法是在服务器端把客户端需要的所有数据采用BeanUtils之类 的工具一次性都装载好，然后传递给客户端：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">PersonInfo p = intf.getPersonByPK(id);</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">BeanUtils.getProperty(p,"age");</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">BeanUtils.getProperty(p,"parent.name");</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">BeanUtils.getProperty(p,"parent.company.name");</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">return p;</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">采用LazyLoad以后，对象的类型其实是域对象 的子类，其中包含了CGLib、Hibernate为实现LazyLoad而添加的代码(也就是上边的p其实是类似于PersonInfo$CGLib$ Proxy的类型)。如果使用Hessian、Burlap等传递的话会导致序列化问题，因为它们没有能力序列化如此复杂的对象；如果使用RMI、 HttpInvoker虽然可以将对象传递到客户端，但是由于反序列化的需要，CGLib、Hibernate的包是需要安装在客户端的，而且客户端的代 码中一旦访问了没有在服务端加载到的属性就会发生“Session已关闭”的异常。那么采用一种更合理的形式把PO传递给客户端就成为一个必须解决的问 题。</p><h3 style="margin-top: 0px; margin-bottom: 0px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-size: 1.2em; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; background-color: rgb(255, 255, 255);"><a name="t6" style="color: rgb(202, 0, 0);"></a>10.7&nbsp; DTO生成器</h3><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">将PO经过一定形式的转换，传递给客户端，使得客户端能够方便地使用传过来的DTO，这就是DTO生成器要解决的问题。把问题具体分解，我们发现DTO生成器的功能如下：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 允许客户端指定加载哪些属性，这样DTO生成器就只加载客户端指定的属性，其他属性不予以加载，这减小了网络流量。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 屏蔽CGLib、Hibernate等的影响，客户端可以把DTO当成一个没有任何副作用的普通JavaBean使用。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; 允许客户端将修改后的DTO传递回服务器端进行更新。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">采用简单的对象克隆方法无法得到满足要求的DTO， 因为克隆以后的对象仍然是和PO一样的被代理对象。更好的解决方法就是重新生成一个与PO的原有类型(比如PersonInfo，而非 PersonInfo$CGLib$Proxy)一致的JavaBean作为DTO，然后将客户端需要的PO中的属性赋值到DTO中。在复制过程中，因为 PO以及关联的对象的信息已经被LazyLoad破坏得乱七八糟了，所以我们必须要通过一种机制知道对象的字段有哪些、字段的类型是什么、字段是否是关联 对象、关联的类型是什么。了解这些信息的最好方式就是通过元数据，案例系统的元数据机制就可以满足这个要求，而且Hibernate也有元数据机制能提供 类似的信息，下面就分别介绍通过这两种元数据机制实现DTO生成器的方法。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">10.7.1&nbsp; 生成器接口定义</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">DTO生成器要允许用户指定转换哪些属性，指定的属性的粒度精确到关联属性。下面假定有如下的员工域模型：员工有自己的上司(manager)、部门(department)、电脑设备(computer)，本身还有工号、姓名等属性。类图如图10.1所示。</p><p align="center" style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><img src="D:\Wizs\temp\f120dce3-3400-44d9-ae57-e52e314d016e\128\index_files\0.13106884305035638.png" height="147" width="311" alt=""></p><p align="center" style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">图10.1&nbsp; 员工类图</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">类图中的两个“0..*—1”的关联关系分别表示：一个部门可以有0到多个员工，一个员工只属于一个部门；一台电脑可以被0到多个员工同时占用，但一个员工必须有且只有一台电脑(这个假设比较特殊)。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">假如客户端想获得员工的所有属性、所属部门、间接上级、间接上级的上级，那么只要指定类似于下面的格式就可以了：department、manager.manager、manager.managermanager。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">【例10.1】定义一个Selectors。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">定义一个Selectors类来表示这些格式，代码如下：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="com">// 关联字段选择器</span></code></li><li class="L1"><code class="language-java"><span class="kwd">package</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">cownew</span><span class="pun">.</span><span class="pln">PIS</span><span class="pun">.</span><span class="pln">framework</span><span class="pun">.</span><span class="pln">common</span><span class="pun">.</span><span class="pln">db</span><span class="pun">;</span></code></li><li class="L2"><code class="language-java"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.</span><span class="typ">Serializable</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">HashSet</span><span class="pun">;</span></code></li><li class="L4"><code class="language-java"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Iterator</span><span class="pun">;</span></code></li><li class="L5"><code class="language-java"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Set</span><span class="pun">;</span></code></li><li class="L6"><code class="language-java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Serializable</span></code></li><li class="L7"><code class="language-java"><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Set</span><span class="pln"> set</span><span class="pun">;</span><span class="pln">   </span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pun">()</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L1"><code class="language-java"><span class="pln">        set </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashSet</span><span class="pun">();</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> capacity</span><span class="pun">)</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L5"><code class="language-java"><span class="pln">        set </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashSet</span><span class="pun">(</span><span class="pln">capacity</span><span class="pun">);</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> add</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> string</span><span class="pun">)</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> set</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="pln">string</span><span class="pun">);</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> remove</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> string</span><span class="pun">)</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> set</span><span class="pun">.</span><span class="pln">remove</span><span class="pun">(</span><span class="pln">string</span><span class="pun">);</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Iterator</span><span class="pln"> iterator</span><span class="pun">()</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> set</span><span class="pun">.</span><span class="pln">iterator</span><span class="pun">();</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> toString</span><span class="pun">()</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> set</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">();</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L4"><code class="language-java"><span class="com">     * 产生以property为根的新的Selectors</span></code></li><li class="L5"><code class="language-java"><span class="com">     */</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pln"> generateSubSelectors</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> property</span><span class="pun">)</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">        property </span><span class="pun">=</span><span class="pln"> property</span><span class="pun">+</span><span class="str">"."</span><span class="pun">;</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="typ">Selectors</span><span class="pln"> newSelector </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pun">();</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="typ">Iterator</span><span class="pln"> it </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">iterator</span><span class="pun">();</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="kwd">while</span><span class="pun">(</span><span class="pln">it</span><span class="pun">.</span><span class="pln">hasNext</span><span class="pun">())</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">            </span><span class="typ">String</span><span class="pln"> item </span><span class="pun">=</span><span class="pln"> it</span><span class="pun">.</span><span class="pln">next</span><span class="pun">().</span><span class="pln">toString</span><span class="pun">();</span></code></li><li class="L4"><code class="language-java"><span class="pln">            </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">item</span><span class="pun">.</span><span class="pln">startsWith</span><span class="pun">(</span><span class="pln">property</span><span class="pun">))</span></code></li><li class="L5"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L6"><code class="language-java"><span class="pln">                </span><span class="typ">String</span><span class="pln"> subItem </span><span class="pun">=</span><span class="pln"> item</span><span class="pun">.</span><span class="pln">substring</span><span class="pun">(</span><span class="pln">property</span><span class="pun">.</span><span class="pln">length</span><span class="pun">());</span></code></li><li class="L7"><code class="language-java"><span class="pln">                newSelector</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="pln">subItem</span><span class="pun">);</span></code></li><li class="L8"><code class="language-java"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> newSelector</span><span class="pun">;</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L3"><code class="language-java"><span class="com">     * property属性是否被定义在Seletors中了</span></code></li><li class="L4"><code class="language-java"><span class="com">     */</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> contains</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> property</span><span class="pun">)</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="typ">Iterator</span><span class="pln"> it </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">iterator</span><span class="pun">();</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="kwd">while</span><span class="pun">(</span><span class="pln">it</span><span class="pun">.</span><span class="pln">hasNext</span><span class="pun">())</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L0"><code class="language-java"><span class="pln">            </span><span class="typ">String</span><span class="pln"> item </span><span class="pun">=</span><span class="pln"> it</span><span class="pun">.</span><span class="pln">next</span><span class="pun">().</span><span class="pln">toString</span><span class="pun">();</span></code></li><li class="L1"><code class="language-java"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">item</span><span class="pun">.</span><span class="pln">startsWith</span><span class="pun">(</span><span class="pln">property</span><span class="pun">))</span></code></li><li class="L2"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">                </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span></code></li><li class="L4"><code class="language-java"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L8"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">调用add方法向Selectors中添加要取得的 属性，支持级联方式，比如manager.department；调用generateSubSelectors方法产生以property为根的新的 Selectors，比如Selectors中有manager.department、manager.manager、computer三项，调用 generateSub- Selectors("manager")以后就产生了department、manager两项；调用contains判断一个property属性是 否被定义在Seletors中了，比如Selectors中有manager.department、manager.manager、computer 三项，那么调用contains("manager")返回true，调用contains("manager.computer")返回false。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">代码示例：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">Selectors s = new Selectors();</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">s.add("department");</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">s.add("manager.manager");</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">s.add("manager.manager.manager");</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println(s.generateSubSelectors("manager"));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println(s.contains("computer"));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">System.out.println(s.contains("manager.manager"));</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">运行结果：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">[manager.manager, manager]</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">false</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">true</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">接下来我们来定义DTO生成器的接口，这个接口将能够转换单个PO为DTO，也可以批量转换多个PO为DTO，而且这个接口还应该允许用户指定转换哪些属性。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">【例10.2】定义DTO生成器的接口。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">代码如下：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="com">// DTO生成器接口</span></code></li><li class="L1"><code class="language-java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">IDTOGenerator</span></code></li><li class="L2"><code class="language-java"><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L4"><code class="language-java"><span class="com">     * 为多个PO产生DTO</span></code></li><li class="L5"><code class="language-java"><span class="com">     * @param list DTO列表</span></code></li><li class="L6"><code class="language-java"><span class="com">     * @param selectors 哪些复合属性需要转换</span></code></li><li class="L7"><code class="language-java"><span class="com">     */</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">List</span><span class="pln"> generateDTOList</span><span class="pun">(</span><span class="typ">List</span><span class="pln"> list</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pln"> selectors</span><span class="pun">);</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L0"><code class="language-java"><span class="com">     * @see List generateDTOList(List list, Selectors selectors)</span></code></li><li class="L1"><code class="language-java"><span class="com">     * @param list DTO列表</span></code></li><li class="L2"><code class="language-java"><span class="com">     */</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">List</span><span class="pln"> generateDTOList</span><span class="pun">(</span><span class="typ">List</span><span class="pln"> list</span><span class="pun">);</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L5"><code class="language-java"><span class="com">     * 为单个PO产生DTO</span></code></li><li class="L6"><code class="language-java"><span class="com">     * @param srcBean</span></code></li><li class="L7"><code class="language-java"><span class="com">     * @param selectors 哪些复合属性需要转换</span></code></li><li class="L8"><code class="language-java"><span class="com">     */</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> generateDTO</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> srcBean</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pln"> selectors</span><span class="pun">);</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> generateDTO</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> srcBean</span><span class="pun">);</span></code></li><li class="L1"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">对于没指定Selectors 参数的generateDTO、generateDTOList方法则不返回关联属性的值，只返回根一级的属性。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">大部分DTOGenerator的子类都将会直接循环调用generateDTO来完成generateDTOList方法，所以定义一个抽象基类来抽象出这个行为。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">【例10.3】DTO生成器抽象基类。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">代码如下：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="com">// DTO生成器抽象基类</span></code></li><li class="L1"><code class="language-java"><span class="kwd">package</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">cownew</span><span class="pun">.</span><span class="pln">PIS</span><span class="pun">.</span><span class="pln">framework</span><span class="pun">.</span><span class="pln">bizLayer</span><span class="pun">;</span></code></li><li class="L2"><code class="language-java"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">ArrayList</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">List</span><span class="pun">;</span></code></li><li class="L4"><code class="language-java"><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">cownew</span><span class="pun">.</span><span class="pln">PIS</span><span class="pun">.</span><span class="pln">framework</span><span class="pun">.</span><span class="pln">common</span><span class="pun">.</span><span class="pln">db</span><span class="pun">.</span><span class="typ">Selectors</span><span class="pun">;</span></code></li><li class="L5"><code class="language-java"><span class="kwd">abstract</span><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AbstractDTOGenerator</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">IDTOGenerator</span></code></li><li class="L6"><code class="language-java"><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">List</span><span class="pln"> generateDTOList</span><span class="pun">(</span><span class="typ">List</span><span class="pln"> list</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pln"> selectors</span><span class="pun">)</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="typ">List</span><span class="pln"> retList </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArrayList</span><span class="pun">(</span><span class="pln">list</span><span class="pun">.</span><span class="pln">size</span><span class="pun">());</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> n </span><span class="pun">=</span><span class="pln"> list</span><span class="pun">.</span><span class="pln">size</span><span class="pun">();</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">            </span><span class="typ">Object</span><span class="pln"> srcOV </span><span class="pun">=</span><span class="pln"> list</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span></code></li><li class="L3"><code class="language-java"><span class="pln">            retList</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="pln">generateDTO</span><span class="pun">(</span><span class="pln">srcOV</span><span class="pun">,</span><span class="pln"> selectors</span><span class="pun">));</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> retList</span><span class="pun">;</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">List</span><span class="pln"> generateDTOList</span><span class="pun">(</span><span class="typ">List</span><span class="pln"> list</span><span class="pun">)</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="typ">List</span><span class="pln"> retList </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArrayList</span><span class="pun">(</span><span class="pln">list</span><span class="pun">.</span><span class="pln">size</span><span class="pun">());</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> n </span><span class="pun">=</span><span class="pln"> list</span><span class="pun">.</span><span class="pln">size</span><span class="pun">();</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">            </span><span class="typ">Object</span><span class="pln"> srcOV </span><span class="pun">=</span><span class="pln"> list</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span></code></li><li class="L3"><code class="language-java"><span class="pln">            retList</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="pln">generateDTO</span><span class="pun">(</span><span class="pln">srcOV</span><span class="pun">));</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> retList</span><span class="pun">;</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">10.7.2&nbsp; Hibernate的元数据</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">Hibernate中有一个非常丰富的元数据模型，含有所有的实体和值类型数据的元数据。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">Hibernate提供了ClassMetadata接口、CollectionMetadata接口和Type层次体系来访问元数据。可以通过SessionFactory获取元数据接口的实例。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="typ">ClassMetadata</span><span class="pln"> catMeta </span><span class="pun">=</span><span class="pln"> sessionfactory</span><span class="pun">.</span><span class="pln">getClassMetadata</span><span class="pun">(</span><span class="typ">Cat</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></li><li class="L1"><code class="language-java"><span class="typ">Object</span><span class="pun">[]</span><span class="pln"> propertyValues </span><span class="pun">=</span><span class="pln"> catMeta</span><span class="pun">.</span><span class="pln">getPropertyValues</span><span class="pun">(</span><span class="pln">fritz</span><span class="pun">);</span></code></li><li class="L2"><code class="language-java"><span class="typ">String</span><span class="pun">[]</span><span class="pln"> propertyNames </span><span class="pun">=</span><span class="pln"> catMeta</span><span class="pun">.</span><span class="pln">getPropertyNames</span><span class="pun">();</span></code></li><li class="L3"><code class="language-java"><span class="typ">Type</span><span class="pun">[]</span><span class="pln"> propertyTypes </span><span class="pun">=</span><span class="pln"> catMeta</span><span class="pun">.</span><span class="pln">getPropertyTypes</span><span class="pun">();</span></code></li><li class="L4"><code class="language-java"><span class="typ">Map</span><span class="pln"> namedValues </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">();</span></code></li><li class="L5"><code class="language-java"><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> propertyNames</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span></code></li><li class="L6"><code class="language-java"><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">propertyTypes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">].</span><span class="pln">isEntityType</span><span class="pun">()</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="pun">!</span><span class="pln">propertyTypes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">].</span><span class="pln">isCollectionType</span><span class="pun">())</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L0"><code class="language-java"><span class="pln">        namedValues</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="pln">propertyNames</span><span class="pun">[</span><span class="pln">i</span><span class="pun">],</span><span class="pln"> propertyValues</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">通过将持久化对象的类作为参数调用SessionFactory的getClassMetadata方法就可以得到关于此对象的所有元数据信息的接口ClassMetadata。下面是ClassMetadata接口的主要方法说明。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public String getEntityName()：获取实体名称。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public String getIdentifierPropertyName()：得到主键的名称。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public String[] getPropertyNames()：得到所有属性名称(不包括主键)。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public Type getIdentifierType()：得到主键的类型。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public Type[] getPropertyTypes()：得到所有属性的类型(不包括主键)。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public Type getPropertyType(String propertyName)：得到指定属性的类型。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public boolean isVersioned()：实体是否是版本化的。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public int getVersionProperty()：得到版本属性。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public boolean[] getPropertyNullability()：得到所有属性的“是否允许为空”属性。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public boolean[] getPropertyLaziness()：得到所有属性的“是否LazyLoad”属性。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public boolean hasIdentifierProperty()：实体是否有主键字段。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public boolean hasSubclasses()：是否有子类。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public boolean isInherited()：是否是子类。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">ClassMetadata 接口有getPropertyTypes()、getPropertyNullability()这样平面化的访问所有字段属性的方法，这些方法是供 Hibernate内部实现用的，在外部使用的时候我们常常需要深入每个属性的内部，这样借助于getPropertyNames()、 getPropertyType(String propertyName)两个方法就可以满足要求了。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 13pt; background-color: rgb(255, 255, 255);">ClassMetadata entityMetaInfo = sessionFactory</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 13pt; background-color: rgb(255, 255, 255);">&nbsp;&nbsp;&nbsp; .getClassMetadata(destClass);</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 13pt; background-color: rgb(255, 255, 255);">String[] propertyNames = entityMetaInfo.getPropertyNames();</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 13pt; background-color: rgb(255, 255, 255);">for (int i = 0, n = propertyNames.length; i &lt; n; i++)</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 13pt; background-color: rgb(255, 255, 255);">{</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 13pt; background-color: rgb(255, 255, 255);">&nbsp;&nbsp;&nbsp; String propertyName = propertyNames[i];</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 13pt; background-color: rgb(255, 255, 255);">&nbsp;&nbsp;&nbsp; Type propType = entityMetaInfo.getPropertyType(propertyName);</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 13pt; background-color: rgb(255, 255, 255);">&nbsp;&nbsp;&nbsp; …</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 13pt; background-color: rgb(255, 255, 255);">}</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 16pt; background-color: rgb(255, 255, 255);">getPropertyType(String propertyName)方法返回的类型为Type，这个类型包含了字段的元数据信息。Type接口只是一个父接口，它有很多子接口和实现类，图10.2是它的主要的子接口和实现类的结构图。</p><p align="center" style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><img src="D:\Wizs\temp\f120dce3-3400-44d9-ae57-e52e314d016e\128\index_files\0.7085361254706266.png" height="327" width="512" alt=""></p><p align="center" style="margin: 5px auto 0.0001pt; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">图10.2&nbsp; Type接口层次图</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">Hibernate中的集合类型的基类是 CollectionType，其子类分别对应着数组类型(ArrayType)、Bag类型(BagType)、List类型(ListType)、 Map类型(MapType)、Set类型(SetType)。而“多对一”和“一对一”类型分别为ManyToOneType和 OneToOneType，它们的基类为EntityType。BigDecimal、Boolean、String、Date等类型则属于 NullableType的直接或者间接子类。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">Type接口的主要方法列举如下。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public boolean isAssociationType()：此类型是否可以转型为AssociationType，并不表示此属性是关联属性。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public boolean isCollectionType()：是否是集合类型。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public boolean isComponentType()：是否是Component类型，如果是的话必须能转型为AbstractComponentType类型。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public boolean isEntityType()：是否是实体类型。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public boolean isAnyType()：是否是Any类型。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public int[] sqlTypes(Mapping mapping)：取得实体各个字段的SQL类型，返回值的类型遵守java.sql.Types中的定义。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public Class getReturnedClass()：返回值类型。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">l&nbsp;&nbsp; public String getName()：返回类型名称。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">【例10.4】Hibernate元数据接口调用。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="pun">示例代码如下：</span></code></li><li class="L1"><code class="language-java"><span class="kwd">package</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">cownew</span><span class="pun">.</span><span class="typ">Char15</span><span class="pun">;</span></code></li><li class="L2"><code class="language-java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="typ">SessionFactory</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="pln">metadata</span><span class="pun">.</span><span class="typ">ClassMetadata</span><span class="pun">;</span></code></li><li class="L4"><code class="language-java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="pln">type</span><span class="pun">.</span><span class="typ">Type</span><span class="pun">;</span></code></li><li class="L5"><code class="language-java"><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">cownew</span><span class="pun">.</span><span class="pln">PIS</span><span class="pun">.</span><span class="pln">base</span><span class="pun">.</span><span class="pln">permission</span><span class="pun">.</span><span class="pln">common</span><span class="pun">.</span><span class="typ">UserInfo</span><span class="pun">;</span></code></li><li class="L6"><code class="language-java"><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">cownew</span><span class="pun">.</span><span class="pln">PIS</span><span class="pun">.</span><span class="pln">framework</span><span class="pun">.</span><span class="pln">bizLayer</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="typ">HibernateConfig</span><span class="pun">;</span></code></li><li class="L7"><code class="language-java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HibernateMetaTest</span></code></li><li class="L8"><code class="language-java"><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="typ">SessionFactory</span><span class="pln"> sessionFactory </span><span class="pun">=</span><span class="pln"> </span></code></li><li class="L2"><code class="language-java"><span class="pln">                    </span><span class="typ">HibernateConfig</span><span class="pun">.</span><span class="pln">getSessionFactory</span><span class="pun">();</span></code></li><li class="L3"><code class="language-java"><span class="pln">        </span><span class="typ">ClassMetadata</span><span class="pln"> entityMetaInfo </span><span class="pun">=</span><span class="pln"> sessionFactory</span></code></li><li class="L4"><code class="language-java"><span class="pln">                </span><span class="pun">.</span><span class="pln">getClassMetadata</span><span class="pun">(</span><span class="typ">UserInfo</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> propertyNames </span><span class="pun">=</span><span class="pln"> entityMetaInfo</span><span class="pun">.</span><span class="pln">getPropertyNames</span><span class="pun">();</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> n </span><span class="pun">=</span><span class="pln"> propertyNames</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">            </span><span class="typ">String</span><span class="pln"> propertyName </span><span class="pun">=</span><span class="pln"> propertyNames</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span></code></li><li class="L9"><code class="language-java"><span class="pln">            </span><span class="typ">Type</span><span class="pln"> propType </span><span class="pun">=</span><span class="pln"> entityMetaInfo</span><span class="pun">.</span><span class="pln">getPropertyType</span><span class="pun">(</span><span class="pln">propertyName</span><span class="pun">);</span></code></li><li class="L0"><code class="language-java"><span class="pln">            </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">propertyName </span><span class="pun">+</span><span class="pln"> </span><span class="str">"字段类型为"</span></code></li><li class="L1"><code class="language-java"><span class="pln">                    </span><span class="pun">+</span><span class="pln"> propType</span><span class="pun">.</span><span class="pln">getReturnedClass</span><span class="pun">().</span><span class="pln">getName</span><span class="pun">());</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L3"><code class="language-java"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">entityMetaInfo</span><span class="pun">.</span><span class="pln">hasIdentifierProperty</span><span class="pun">())</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L5"><code class="language-java"><span class="pln">            </span><span class="typ">String</span><span class="pln"> idPropName </span><span class="pun">=</span><span class="pln"> entityMetaInfo</span><span class="pun">.</span><span class="pln">getIdentifierPropertyName</span><span class="pun">();</span></code></li><li class="L6"><code class="language-java"><span class="pln">            </span><span class="typ">Type</span><span class="pln"> idPropType </span><span class="pun">=</span><span class="pln"> entityMetaInfo</span><span class="pun">.</span><span class="pln">getIdentifierType</span><span class="pun">();</span></code></li><li class="L7"><code class="language-java"><span class="pln">            </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"主键字段为:"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> idPropName </span><span class="pun">+</span><span class="pln"> </span><span class="str">"类型为"</span></code></li><li class="L8"><code class="language-java"><span class="pln">                </span><span class="pun">+</span><span class="pln"> idPropType</span><span class="pun">.</span><span class="pln">getReturnedClass</span><span class="pun">().</span><span class="pln">getName</span><span class="pun">());</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L1"><code class="language-java"><span class="pln">            </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"此实体无主键"</span><span class="pun">);</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-java"><span class="pun">}</span></code></li><li class="L5"><code class="language-java"><span class="pun">运行结果：</span></code></li><li class="L6"><code class="language-java"><span class="pln">number</span><span class="pun">字段类型为</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">String</span></code></li><li class="L7"><code class="language-java"><span class="pln">password</span><span class="pun">字段类型为</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">String</span></code></li><li class="L8"><code class="language-java"><span class="pln">person</span><span class="pun">字段类型为</span><span class="pln">com</span><span class="pun">.</span><span class="pln">cownew</span><span class="pun">.</span><span class="pln">PIS</span><span class="pun">.</span><span class="pln">basedata</span><span class="pun">.</span><span class="pln">common</span><span class="pun">.</span><span class="typ">PersonInfo</span></code></li><li class="L9"><code class="language-java"><span class="pln">permissions</span><span class="pun">字段类型为</span><span class="pln">java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Set</span></code></li><li class="L0"><code class="language-java"><span class="pln">isSuperAdmin</span><span class="pun">字段类型为</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">Boolean</span></code></li><li class="L1"><code class="language-java"><span class="pln">isFreezed</span><span class="pun">字段类型为</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">Boolean</span></code></li><li class="L2"><code class="language-java"><span class="pun">主键字段为:</span><span class="pln">id</span><span class="pun">类型为</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">String</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">10.7.3&nbsp; HibernateDTO产生器</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">【例10.5】HibernateDTO产生器示例。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">代码如下：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="com">// HibernateDTO产生器</span></code></li><li class="L1"><code class="language-java"><span class="kwd">package</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">cownew</span><span class="pun">.</span><span class="pln">PIS</span><span class="pun">.</span><span class="pln">framework</span><span class="pun">.</span><span class="pln">bizLayer</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">;</span></code></li><li class="L2"><code class="language-java"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">ArrayList</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">HashMap</span><span class="pun">;</span></code></li><li class="L4"><code class="language-java"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">HashSet</span><span class="pun">;</span></code></li><li class="L5"><code class="language-java"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Iterator</span><span class="pun">;</span></code></li><li class="L6"><code class="language-java"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">List</span><span class="pun">;</span></code></li><li class="L7"><code class="language-java"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Map</span><span class="pun">;</span></code></li><li class="L8"><code class="language-java"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Set</span><span class="pun">;</span></code></li><li class="L9"><code class="language-java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="typ">SessionFactory</span><span class="pun">;</span></code></li><li class="L0"><code class="language-java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="pln">metadata</span><span class="pun">.</span><span class="typ">ClassMetadata</span><span class="pun">;</span></code></li><li class="L1"><code class="language-java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="pln">proxy</span><span class="pun">.</span><span class="typ">HibernateProxyHelper</span><span class="pun">;</span></code></li><li class="L2"><code class="language-java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="pln">type</span><span class="pun">.</span><span class="typ">ArrayType</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="pln">type</span><span class="pun">.</span><span class="typ">CollectionType</span><span class="pun">;</span></code></li><li class="L4"><code class="language-java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="pln">type</span><span class="pun">.</span><span class="typ">EntityType</span><span class="pun">;</span></code></li><li class="L5"><code class="language-java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="pln">type</span><span class="pun">.</span><span class="typ">ListType</span><span class="pun">;</span></code></li><li class="L6"><code class="language-java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="pln">type</span><span class="pun">.</span><span class="typ">MapType</span><span class="pun">;</span></code></li><li class="L7"><code class="language-java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="pln">type</span><span class="pun">.</span><span class="typ">SetType</span><span class="pun">;</span></code></li><li class="L8"><code class="language-java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">hibernate</span><span class="pun">.</span><span class="pln">type</span><span class="pun">.</span><span class="typ">Type</span><span class="pun">;</span></code></li><li class="L9"><code class="language-java"><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">cownew</span><span class="pun">.</span><span class="pln">PIS</span><span class="pun">.</span><span class="pln">framework</span><span class="pun">.</span><span class="pln">bizLayer</span><span class="pun">.</span><span class="typ">AbstractDTOGenerator</span><span class="pun">;</span></code></li><li class="L0"><code class="language-java"><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">cownew</span><span class="pun">.</span><span class="pln">PIS</span><span class="pun">.</span><span class="pln">framework</span><span class="pun">.</span><span class="pln">common</span><span class="pun">.</span><span class="pln">db</span><span class="pun">.</span><span class="typ">Selectors</span><span class="pun">;</span></code></li><li class="L1"><code class="language-java"><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">cownew</span><span class="pun">.</span><span class="pln">ctk</span><span class="pun">.</span><span class="pln">common</span><span class="pun">.</span><span class="typ">PropertyUtils</span><span class="pun">;</span></code></li><li class="L2"><code class="language-java"><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">cownew</span><span class="pun">.</span><span class="pln">ctk</span><span class="pun">.</span><span class="pln">common</span><span class="pun">.</span><span class="typ">ExceptionUtils</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HibernateDTOGenerator</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">AbstractDTOGenerator</span></code></li><li class="L4"><code class="language-java"><span class="pun">{</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">SessionFactory</span><span class="pln"> sessionFactory</span><span class="pun">;</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">HibernateDTOGenerator</span><span class="pun">(</span><span class="typ">SessionFactory</span><span class="pln"> sessionFactory</span><span class="pun">)</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="kwd">super</span><span class="pun">();</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">sessionFactory </span><span class="pun">=</span><span class="pln"> sessionFactory</span><span class="pun">;</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> generateDTO</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> srcBean</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pln"> selectors</span><span class="pun">)</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">        </span><span class="kwd">try</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L5"><code class="language-java"><span class="pln">            </span><span class="kwd">return</span><span class="pln"> copyValueObject</span><span class="pun">(</span><span class="pln">srcBean</span><span class="pun">,</span><span class="pln"> selectors</span><span class="pun">);</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">InstantiationException</span><span class="pln"> e</span><span class="pun">)</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">            </span><span class="kwd">throw</span><span class="pln"> </span><span class="typ">ExceptionUtils</span><span class="pun">.</span><span class="pln">toRuntimeException</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">IllegalAccessException</span><span class="pln"> e</span><span class="pun">)</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L1"><code class="language-java"><span class="pln">            </span><span class="kwd">throw</span><span class="pln"> </span><span class="typ">ExceptionUtils</span><span class="pun">.</span><span class="pln">toRuntimeException</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> copyValueObject</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> srcVO</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pln"> selectors</span><span class="pun">)</span></code></li><li class="L5"><code class="language-java"><span class="pln">            </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">InstantiationException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IllegalAccessException</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="com">// 取得被代理之前的类型</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="typ">Class</span><span class="pln"> destClass </span><span class="pun">=</span><span class="pln"> </span><span class="typ">HibernateProxyHelper</span></code></li><li class="L9"><code class="language-java"><span class="pln">                </span><span class="pun">.</span><span class="pln">getClassWithoutInitializingProxy</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">);</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="typ">Object</span><span class="pln"> newBean </span><span class="pun">=</span><span class="pln"> destClass</span><span class="pun">.</span><span class="pln">newInstance</span><span class="pun">();</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="typ">ClassMetadata</span><span class="pln"> entityMetaInfo </span><span class="pun">=</span><span class="pln"> sessionFactory</span></code></li><li class="L2"><code class="language-java"><span class="pln">                </span><span class="pun">.</span><span class="pln">getClassMetadata</span><span class="pun">(</span><span class="pln">destClass</span><span class="pun">);</span></code></li><li class="L3"><code class="language-java"><span class="pln">        </span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> propertyNames </span><span class="pun">=</span><span class="pln"> entityMetaInfo</span><span class="pun">.</span><span class="pln">getPropertyNames</span><span class="pun">();</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> n </span><span class="pun">=</span><span class="pln"> propertyNames</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L6"><code class="language-java"><span class="pln">            </span><span class="typ">String</span><span class="pln"> propertyName </span><span class="pun">=</span><span class="pln"> propertyNames</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span></code></li><li class="L7"><code class="language-java"><span class="pln">            </span><span class="typ">Type</span><span class="pln"> propType </span><span class="pun">=</span><span class="pln"> entityMetaInfo</span><span class="pun">.</span><span class="pln">getPropertyType</span><span class="pun">(</span><span class="pln">propertyName</span><span class="pun">);</span></code></li><li class="L8"><code class="language-java"><span class="pln">            </span><span class="com">// 如果不是实体类型也不是集合类型,即普通类型,则直接拷贝这些属性</span></code></li><li class="L9"><code class="language-java"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!(</span><span class="pln">propType </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">EntityType</span><span class="pun">)</span></code></li><li class="L0"><code class="language-java"><span class="pln">                    </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="pun">!(</span><span class="pln">propType </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">CollectionType</span><span class="pun">))</span></code></li><li class="L1"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">                </span><span class="typ">Object</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span><span class="pln"> </span></code></li><li class="L3"><code class="language-java"><span class="pln">                        propertyName</span><span class="pun">);</span></code></li><li class="L4"><code class="language-java"><span class="pln">                </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="pln">newBean</span><span class="pun">,</span><span class="pln"> propertyName</span><span class="pun">,</span><span class="pln"> value</span><span class="pun">);</span></code></li><li class="L5"><code class="language-java"><span class="pln">            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">selectors </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span></code></li><li class="L6"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">                </span><span class="typ">Selectors</span><span class="pln"> subSelector </span><span class="pun">=</span><span class="pln"> selectors</span></code></li><li class="L8"><code class="language-java"><span class="pln">                        </span><span class="pun">.</span><span class="pln">generateSubSelectors</span><span class="pun">(</span><span class="pln">propertyName</span><span class="pun">);</span></code></li><li class="L9"><code class="language-java"><span class="pln">                </span><span class="com">// 如果是集合属性,并且用户在selectors中声明要求此属性，</span></code></li><li class="L0"><code class="language-java"><span class="pln">                </span><span class="com">// 则复制这些属性</span></code></li><li class="L1"><code class="language-java"><span class="pln">                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">propType </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">CollectionType</span></code></li><li class="L2"><code class="language-java"><span class="pln">                        </span><span class="pun">&amp;&amp;</span><span class="pln"> selectors</span><span class="pun">.</span><span class="pln">contains</span><span class="pun">(</span><span class="pln">propertyName</span><span class="pun">))</span></code></li><li class="L3"><code class="language-java"><span class="pln">                </span><span class="pun">{</span></code></li><li class="L4"><code class="language-java"><span class="pln">                    </span><span class="typ">Object</span><span class="pln"> collValue </span><span class="pun">=</span><span class="pln"> generateCollectionValue</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span></code></li><li class="L5"><code class="language-java"><span class="pln">                            </span><span class="pun">(</span><span class="typ">CollectionType</span><span class="pun">)</span><span class="pln"> propType</span><span class="pun">,</span><span class="pln"> propertyName</span><span class="pun">,</span></code></li><li class="L6"><code class="language-java"><span class="pln">                            subSelector</span><span class="pun">);</span></code></li><li class="L7"><code class="language-java"><span class="pln">                    </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="pln">newBean</span><span class="pun">,</span><span class="pln"> propertyName</span><span class="pun">,</span><span class="pln"> </span></code></li><li class="L8"><code class="language-java"><span class="pln">                                collValue</span><span class="pun">);</span></code></li><li class="L9"><code class="language-java"><span class="pln">                </span><span class="pun">}</span></code></li><li class="L0"><code class="language-java"><span class="pln">                </span><span class="com">// 如果是实体属性,并且用户在selectors中声明要求此属性</span></code></li><li class="L1"><code class="language-java"><span class="pln">                </span><span class="com">// 则复制这些属性</span></code></li><li class="L2"><code class="language-java"><span class="pln">                </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">selectors</span><span class="pun">.</span><span class="pln">contains</span><span class="pun">(</span><span class="pln">propertyName</span><span class="pun">))</span></code></li><li class="L3"><code class="language-java"><span class="pln">                </span><span class="pun">{</span></code></li><li class="L4"><code class="language-java"><span class="pln">                    </span><span class="typ">Object</span><span class="pln"> oldVO </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span></code></li><li class="L5"><code class="language-java"><span class="pln">                            propertyName</span><span class="pun">);</span></code></li><li class="L6"><code class="language-java"><span class="pln">                    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">oldVO </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span></code></li><li class="L7"><code class="language-java"><span class="pln">                    </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">                        </span><span class="typ">Object</span><span class="pln"> obj </span><span class="pun">=</span><span class="pln"> copyValueObject</span><span class="pun">(</span><span class="pln">oldVO</span><span class="pun">,</span><span class="pln"> subSelector</span><span class="pun">);</span></code></li><li class="L9"><code class="language-java"><span class="pln">                        </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="pln">newBean</span><span class="pun">,</span><span class="pln"> propertyName</span><span class="pun">,</span><span class="pln"> obj</span><span class="pun">);</span></code></li><li class="L0"><code class="language-java"><span class="pln">                    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-java"><span class="pln">                </span><span class="pun">}</span></code></li><li class="L2"><code class="language-java"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L3"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="com">// 由于主键字段没有在getPropertyNames中,所以要复制主键</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="typ">String</span><span class="pln"> idPropName </span><span class="pun">=</span><span class="pln"> entityMetaInfo</span><span class="pun">.</span><span class="pln">getIdentifierPropertyName</span><span class="pun">();</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="typ">Object</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span><span class="pln"> idPropName</span><span class="pun">);</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="pln">newBean</span><span class="pun">,</span><span class="pln"> idPropName</span><span class="pun">,</span><span class="pln"> value</span><span class="pun">);</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> newBean</span><span class="pun">;</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L1"><code class="language-java"><span class="com">     * 生成srcVO的副本,关联属性由subSelector指定</span></code></li><li class="L2"><code class="language-java"><span class="com">     */</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> generateCollectionValue</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> srcVO</span><span class="pun">,</span><span class="pln"> </span><span class="typ">CollectionType</span><span class="pln"> </span></code></li><li class="L4"><code class="language-java"><span class="pln">                type</span><span class="pun">,</span><span class="typ">String</span><span class="pln"> propertyName</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pln"> subSelector</span><span class="pun">)</span></code></li><li class="L5"><code class="language-java"><span class="pln">            </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">InstantiationException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IllegalAccessException</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">type </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">SetType</span><span class="pun">)</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">            </span><span class="typ">Set</span><span class="pln"> valueSet </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashSet</span><span class="pun">();</span></code></li><li class="L0"><code class="language-java"><span class="pln">            </span><span class="typ">Set</span><span class="pln"> oldSet </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Set</span><span class="pun">)</span><span class="pln"> </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span><span class="pln"> </span></code></li><li class="L1"><code class="language-java"><span class="pln">                                                        propertyName</span><span class="pun">);</span></code></li><li class="L2"><code class="language-java"><span class="pln">            </span><span class="typ">Iterator</span><span class="pln"> oldIt </span><span class="pun">=</span><span class="pln"> oldSet</span><span class="pun">.</span><span class="pln">iterator</span><span class="pun">();</span></code></li><li class="L3"><code class="language-java"><span class="pln">            </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">oldIt</span><span class="pun">.</span><span class="pln">hasNext</span><span class="pun">())</span></code></li><li class="L4"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L5"><code class="language-java"><span class="pln">                </span><span class="typ">Object</span><span class="pln"> oldValue </span><span class="pun">=</span><span class="pln"> oldIt</span><span class="pun">.</span><span class="pln">next</span><span class="pun">();</span></code></li><li class="L6"><code class="language-java"><span class="pln">                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">oldValue </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span></code></li><li class="L7"><code class="language-java"><span class="pln">                </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">                    </span><span class="typ">Object</span><span class="pln"> obj </span><span class="pun">=</span><span class="pln"> copyValueObject</span><span class="pun">(</span><span class="pln">oldValue</span><span class="pun">,</span><span class="pln"> subSelector</span><span class="pun">);</span></code></li><li class="L9"><code class="language-java"><span class="pln">                    valueSet</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="pln">obj</span><span class="pun">);</span></code></li><li class="L0"><code class="language-java"><span class="pln">                </span><span class="pun">}</span></code></li><li class="L1"><code class="language-java"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L2"><code class="language-java"><span class="pln">            </span><span class="kwd">return</span><span class="pln"> valueSet</span><span class="pun">;</span></code></li><li class="L3"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">type </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">ArrayType</span><span class="pun">)</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L5"><code class="language-java"><span class="pln">            </span><span class="typ">Object</span><span class="pun">[]</span><span class="pln"> oldArray </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Object</span><span class="pun">[])</span><span class="pln"> </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span></code></li><li class="L6"><code class="language-java"><span class="pln">                    propertyName</span><span class="pun">);</span></code></li><li class="L7"><code class="language-java"><span class="pln">            </span><span class="typ">Object</span><span class="pun">[]</span><span class="pln"> valueArray </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">[</span><span class="pln">oldArray</span><span class="pun">.</span><span class="pln">length</span><span class="pun">];</span></code></li><li class="L8"><code class="language-java"><span class="pln">            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> n </span><span class="pun">=</span><span class="pln"> oldArray</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span></code></li><li class="L9"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L0"><code class="language-java"><span class="pln">                </span><span class="typ">Object</span><span class="pln"> oldValue </span><span class="pun">=</span><span class="pln"> oldArray</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span></code></li><li class="L1"><code class="language-java"><span class="pln">                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">oldValue </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span></code></li><li class="L2"><code class="language-java"><span class="pln">                </span><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">                    valueArray</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> copyValueObject</span><span class="pun">(</span><span class="pln">oldValue</span><span class="pun">,</span><span class="pln"> subSelector</span><span class="pun">);</span></code></li><li class="L4"><code class="language-java"><span class="pln">                </span><span class="pun">}</span></code></li><li class="L5"><code class="language-java"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L6"><code class="language-java"><span class="pln">            </span><span class="kwd">return</span><span class="pln"> valueArray</span><span class="pun">;</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">type </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">ListType</span><span class="pun">)</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">            </span><span class="typ">List</span><span class="pln"> oldList </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">List</span><span class="pun">)</span><span class="pln"> </span><span class="typ">PropertyUtils</span></code></li><li class="L0"><code class="language-java"><span class="pln">                    </span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span><span class="pln"> propertyName</span><span class="pun">);</span></code></li><li class="L1"><code class="language-java"><span class="pln">            </span><span class="typ">List</span><span class="pln"> valueList </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArrayList</span><span class="pun">(</span><span class="pln">oldList</span><span class="pun">.</span><span class="pln">size</span><span class="pun">());</span></code></li><li class="L2"><code class="language-java"><span class="pln">            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> n </span><span class="pun">=</span><span class="pln"> oldList</span><span class="pun">.</span><span class="pln">size</span><span class="pun">();</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span></code></li><li class="L3"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L4"><code class="language-java"><span class="pln">                </span><span class="typ">Object</span><span class="pln"> oldValue </span><span class="pun">=</span><span class="pln"> oldList</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span></code></li><li class="L5"><code class="language-java"><span class="pln">                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">oldValue </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span></code></li><li class="L6"><code class="language-java"><span class="pln">                </span><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">                    valueList</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="pln">copyValueObject</span><span class="pun">(</span><span class="pln">oldValue</span><span class="pun">,</span><span class="pln"> subSelector</span><span class="pun">));</span></code></li><li class="L8"><code class="language-java"><span class="pln">                </span><span class="pun">}</span></code></li><li class="L9"><code class="language-java"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L0"><code class="language-java"><span class="pln">            </span><span class="kwd">return</span><span class="pln"> valueList</span><span class="pun">;</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">type </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">MapType</span><span class="pun">)</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">            </span><span class="typ">Map</span><span class="pln"> oldMap </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Map</span><span class="pun">)</span><span class="pln"> </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span><span class="pln"> </span></code></li><li class="L4"><code class="language-java"><span class="pln">                                                            propertyName</span><span class="pun">);</span></code></li><li class="L5"><code class="language-java"><span class="pln">            </span><span class="typ">Map</span><span class="pln"> valueMap </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">(</span><span class="pln">oldMap</span><span class="pun">.</span><span class="pln">size</span><span class="pun">());</span></code></li><li class="L6"><code class="language-java"><span class="pln">            </span><span class="typ">Set</span><span class="pln"> keySet </span><span class="pun">=</span><span class="pln"> oldMap</span><span class="pun">.</span><span class="pln">keySet</span><span class="pun">();</span></code></li><li class="L7"><code class="language-java"><span class="pln">            </span><span class="typ">Iterator</span><span class="pln"> keyIt </span><span class="pun">=</span><span class="pln"> keySet</span><span class="pun">.</span><span class="pln">iterator</span><span class="pun">();</span></code></li><li class="L8"><code class="language-java"><span class="pln">            </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">keyIt</span><span class="pun">.</span><span class="pln">hasNext</span><span class="pun">())</span></code></li><li class="L9"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L0"><code class="language-java"><span class="pln">                </span><span class="typ">Object</span><span class="pln"> key </span><span class="pun">=</span><span class="pln"> keyIt</span><span class="pun">.</span><span class="pln">next</span><span class="pun">();</span></code></li><li class="L1"><code class="language-java"><span class="pln">                </span><span class="typ">Object</span><span class="pln"> oldValue </span><span class="pun">=</span><span class="pln"> oldMap</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">key</span><span class="pun">);</span></code></li><li class="L2"><code class="language-java"><span class="pln">                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">oldValue </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span></code></li><li class="L3"><code class="language-java"><span class="pln">                </span><span class="pun">{</span></code></li><li class="L4"><code class="language-java"><span class="pln">                    valueMap</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="pln">key</span><span class="pun">,</span><span class="pln"> copyValueObject</span><span class="pun">(</span><span class="pln">oldValue</span><span class="pun">,</span><span class="pln"> </span></code></li><li class="L5"><code class="language-java"><span class="pln">                                                            subSelector</span><span class="pun">));</span></code></li><li class="L6"><code class="language-java"><span class="pln">                </span><span class="pun">}</span></code></li><li class="L7"><code class="language-java"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L8"><code class="language-java"><span class="pln">            </span><span class="kwd">return</span><span class="pln"> valueMap</span><span class="pun">;</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">type </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">SetType</span><span class="pun">)</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L1"><code class="language-java"><span class="pln">            </span><span class="typ">Set</span><span class="pln"> oldSet </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Set</span><span class="pun">)</span><span class="pln"> </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span><span class="pln"> </span></code></li><li class="L2"><code class="language-java"><span class="pln">                                                            propertyName</span><span class="pun">);</span></code></li><li class="L3"><code class="language-java"><span class="pln">            </span><span class="typ">Set</span><span class="pln"> valueSet </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashSet</span><span class="pun">(</span><span class="pln">oldSet</span><span class="pun">.</span><span class="pln">size</span><span class="pun">());</span></code></li><li class="L4"><code class="language-java"><span class="pln">            </span><span class="typ">Iterator</span><span class="pln"> it </span><span class="pun">=</span><span class="pln"> oldSet</span><span class="pun">.</span><span class="pln">iterator</span><span class="pun">();</span></code></li><li class="L5"><code class="language-java"><span class="pln">            </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">it</span><span class="pun">.</span><span class="pln">hasNext</span><span class="pun">())</span></code></li><li class="L6"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">                </span><span class="typ">Object</span><span class="pln"> oldValue </span><span class="pun">=</span><span class="pln"> it</span><span class="pun">.</span><span class="pln">next</span><span class="pun">();</span></code></li><li class="L8"><code class="language-java"><span class="pln">                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">oldValue </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span></code></li><li class="L9"><code class="language-java"><span class="pln">                </span><span class="pun">{</span></code></li><li class="L0"><code class="language-java"><span class="pln">                    </span><span class="typ">Object</span><span class="pln"> copyValue </span><span class="pun">=</span><span class="pln"> copyValueObject</span><span class="pun">(</span><span class="pln">oldValue</span><span class="pun">,</span><span class="pln"> </span></code></li><li class="L1"><code class="language-java"><span class="pln">                                                        subSelector</span><span class="pun">);</span></code></li><li class="L2"><code class="language-java"><span class="pln">                    valueSet</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="pln">copyValue</span><span class="pun">);</span></code></li><li class="L3"><code class="language-java"><span class="pln">                </span><span class="pun">}</span></code></li><li class="L4"><code class="language-java"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L5"><code class="language-java"><span class="pln">            </span><span class="kwd">return</span><span class="pln"> valueSet</span><span class="pun">;</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">IllegalArgumentException</span><span class="pun">(</span><span class="str">"unsupport Type:"</span></code></li><li class="L8"><code class="language-java"><span class="pln">                </span><span class="pun">+</span><span class="pln"> type</span><span class="pun">.</span><span class="pln">getClass</span><span class="pun">().</span><span class="pln">getName</span><span class="pun">());</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> generateDTO</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> srcBean</span><span class="pun">)</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="kwd">try</span></code></li><li class="L3"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L4"><code class="language-java"><span class="pln">            </span><span class="kwd">return</span><span class="pln"> copyValueObject</span><span class="pun">(</span><span class="pln">srcBean</span><span class="pun">);</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">InstantiationException</span><span class="pln"> e</span><span class="pun">)</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">            </span><span class="kwd">throw</span><span class="pln"> </span><span class="typ">ExceptionUtils</span><span class="pun">.</span><span class="pln">toRuntimeException</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">IllegalAccessException</span><span class="pln"> e</span><span class="pun">)</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L0"><code class="language-java"><span class="pln">            </span><span class="kwd">throw</span><span class="pln"> </span><span class="typ">ExceptionUtils</span><span class="pun">.</span><span class="pln">toRuntimeException</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L4"><code class="language-java"><span class="com">     * 得到srcVO的副本</span></code></li><li class="L5"><code class="language-java"><span class="com">     */</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> copyValueObject</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> srcVO</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span></code></li><li class="L7"><code class="language-java"><span class="pln">                </span><span class="typ">InstantiationException</span><span class="pun">,</span><span class="typ">IllegalAccessException</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="typ">Class</span><span class="pln"> destClass </span><span class="pun">=</span><span class="pln"> </span><span class="typ">HibernateProxyHelper</span></code></li><li class="L0"><code class="language-java"><span class="pln">                </span><span class="pun">.</span><span class="pln">getClassWithoutInitializingProxy</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">);</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="typ">Object</span><span class="pln"> newBean </span><span class="pun">=</span><span class="pln"> destClass</span><span class="pun">.</span><span class="pln">newInstance</span><span class="pun">();</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="typ">ClassMetadata</span><span class="pln"> entityMetaInfo </span><span class="pun">=</span><span class="pln"> sessionFactory</span></code></li><li class="L3"><code class="language-java"><span class="pln">                </span><span class="pun">.</span><span class="pln">getClassMetadata</span><span class="pun">(</span><span class="pln">destClass</span><span class="pun">);</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> propNames </span><span class="pun">=</span><span class="pln"> entityMetaInfo</span><span class="pun">.</span><span class="pln">getPropertyNames</span><span class="pun">();</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> n </span><span class="pun">=</span><span class="pln"> propNames</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">            </span><span class="typ">String</span><span class="pln"> propName </span><span class="pun">=</span><span class="pln"> propNames</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span></code></li><li class="L8"><code class="language-java"><span class="pln">            </span><span class="typ">Type</span><span class="pln"> fType </span><span class="pun">=</span><span class="pln"> entityMetaInfo</span><span class="pun">.</span><span class="pln">getPropertyType</span><span class="pun">(</span><span class="pln">propName</span><span class="pun">);</span></code></li><li class="L9"><code class="language-java"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!(</span><span class="pln">fType </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">EntityType</span><span class="pun">)</span></code></li><li class="L0"><code class="language-java"><span class="pln">                    </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="pun">!(</span><span class="pln">fType </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">CollectionType</span><span class="pun">))</span></code></li><li class="L1"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">                </span><span class="typ">Object</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span><span class="pln"> propName</span><span class="pun">);</span></code></li><li class="L3"><code class="language-java"><span class="pln">                </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="pln">newBean</span><span class="pun">,</span><span class="pln"> propName</span><span class="pun">,</span><span class="pln"> value</span><span class="pun">);</span></code></li><li class="L4"><code class="language-java"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="typ">String</span><span class="pln"> idPropName </span><span class="pun">=</span><span class="pln"> entityMetaInfo</span><span class="pun">.</span><span class="pln">getIdentifierPropertyName</span><span class="pun">();</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="typ">Object</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span><span class="pln"> idPropName</span><span class="pun">);</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="pln">newBean</span><span class="pun">,</span><span class="pln"> idPropName</span><span class="pun">,</span><span class="pln"> value</span><span class="pun">);</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> newBean</span><span class="pun">;</span></code></li><li class="L0"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">类的核心方法就是copyValueObject、generateCollectionValue，它们分别负责生成关联实体和集合属性。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">在copyValueObject中首先调用Hibernate的工具类HibernateProxyHelper提供的getClassWithoutInitializingProxy方法来得到被LazyLoad代理之前的类名，比如：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">getClassWithoutInitializingProxy(session.load(PersonInfo.class, id))返回PersonInfo.class。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">getClassWithoutInitializingProxy(new PersonInfo())也将返回PersonInfo.class。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">这是去掉LazyLoad这个包袱的最重要的一步。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">接着用反射的方法得到getClassWithoutInitializingProxy方法返回的类型的实例。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">最后使用Hibernate的元数据API逐个判断 实体的各个字段的属性，如果字段是普通字段(既不是实体类型也不是集合类型)则直接使用PropertyUtils来拷贝字段属性；如果字段是集合属性， 并且用户在selectors中声明要求此属性，则调用generateCollectionValue方法来生成新的集合属性；如果是实体属性，并且用 户在selectors中声明要求此属性，则递归调用copyValueObject方法来取得这个实体属性。需要注意的是在字段是非普通属性的时候，需 要调用Selectors的generateSubSelectors方法来更换Selectors的相对根，这就达到了从左到右的逐级深入地取得关联属 性值的目的。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">generateCollectionValue方法用来根据源bean生成新的集合属性。因为Hibernate中集合字段的类型都是基于接口的，所以此处我们使用这些接口的任意实现类就可以。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">调用代码示例：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="typ">SessionFactory</span><span class="pln"> sessionFactory </span><span class="pun">=</span><span class="pln"> </span><span class="typ">HibernateConfig</span><span class="pun">.</span><span class="pln">getSessionFactory</span><span class="pun">();</span></code></li><li class="L1"><code class="language-java"><span class="typ">Session</span><span class="pln"> session </span><span class="pun">=</span><span class="pln"> sessionFactory</span><span class="pun">.</span><span class="pln">openSession</span><span class="pun">();</span></code></li><li class="L2"><code class="language-java"><span class="typ">UserInfo</span><span class="pln"> userInfo </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">UserInfo</span><span class="pun">)</span><span class="pln"> session</span><span class="pun">.</span><span class="pln">load</span><span class="pun">(</span><span class="typ">UserInfo</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span></code></li><li class="L3"><code class="language-java"><span class="str">"1111111111111111111-88888888"</span><span class="pun">);</span></code></li><li class="L4"><code class="language-java"><span class="typ">HibernateDTOGenerator</span><span class="pln"> dtoGenerator </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HibernateDTOGenerator</span><span class="pun">(</span></code></li><li class="L5"><code class="language-java"><span class="pln">sessionFactory</span><span class="pun">);</span></code></li><li class="L6"><code class="language-java"><span class="typ">Selectors</span><span class="pln"> selectors </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pun">();</span></code></li><li class="L7"><code class="language-java"><span class="pln">selectors</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="str">"person"</span><span class="pun">);</span></code></li><li class="L8"><code class="language-java"><span class="typ">UserInfo</span><span class="pln"> newUser1 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">UserInfo</span><span class="pun">)</span><span class="pln"> dtoGenerator</span><span class="pun">.</span><span class="pln">generateDTO</span><span class="pun">(</span><span class="pln">userInfo</span><span class="pun">);</span></code></li><li class="L9"><code class="language-java"><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">newUser1</span><span class="pun">.</span><span class="pln">getNumber</span><span class="pun">());</span></code></li><li class="L0"><code class="language-java"><span class="typ">UserInfo</span><span class="pln"> newUser2 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">UserInfo</span><span class="pun">)</span><span class="pln"> dtoGenerator</span><span class="pun">.</span><span class="pln">generateDTO</span><span class="pun">(</span><span class="pln">userInfo</span><span class="pun">,</span></code></li><li class="L1"><code class="language-java"><span class="pln">selectors</span><span class="pun">);</span></code></li><li class="L2"><code class="language-java"><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">newUser2</span><span class="pun">.</span><span class="pln">getPerson</span><span class="pun">().</span><span class="pln">getName</span><span class="pun">());</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">10.7.4&nbsp; 通用DTO生成器</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">HibernateDTOGenerator比较完 美地解决了DTO的产生的问题，由于使用Hibernate本身的元数据机制，所以这个DTOGenerator可以脱离案例系统使用。并不是所有的 ORM工具都提供了像Hibernate一样的元数据机制，所以对于这样的ORM就必须使用案例系统的元数据机制。代码的实现和 HibernateDTOGenerator非常类似，不过由于根据PO得到DTO的方式在各个ORM之间的差异非常大，比如在Hibernate中PO 的类名就是DTO的类名，而在EJB的实体Bean中PO和DTO的类名没有直接关系，这就需要使用某种命名约定来决定DTO的类名(比如DTO类名为实 体Bean类名加“DTO”)。CommonDTOGenerator只能是一个抽象类，把根据PO得到DTO等不能确定的逻辑留到具体的子类中实现。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">【例10.6】通用DTO生成器示例。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">通用DTO生成器的代码如下：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="com">// 通用DTO生成器</span></code></li><li class="L1"><code class="language-java"><span class="kwd">abstract</span><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CommonDTOGenerator</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">AbstractDTOGenerator</span></code></li><li class="L2"><code class="language-java"><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> generateDTO</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> srcBean</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pln"> selectors</span><span class="pun">)</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="kwd">try</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L7"><code class="language-java"><span class="pln">            </span><span class="kwd">return</span><span class="pln"> copyValueObject</span><span class="pun">((</span><span class="typ">IValueObject</span><span class="pun">)</span><span class="pln"> srcBean</span><span class="pun">,</span><span class="pln"> selectors</span><span class="pun">);</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">InstantiationException</span><span class="pln"> e</span><span class="pun">)</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L0"><code class="language-java"><span class="pln">            </span><span class="kwd">throw</span><span class="pln"> </span><span class="typ">ExceptionUtils</span><span class="pun">.</span><span class="pln">toRuntimeException</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">IllegalAccessException</span><span class="pln"> e</span><span class="pun">)</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">            </span><span class="kwd">throw</span><span class="pln"> </span><span class="typ">ExceptionUtils</span><span class="pun">.</span><span class="pln">toRuntimeException</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> generateDTO</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> srcBean</span><span class="pun">)</span></code></li><li class="L7"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="kwd">try</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L0"><code class="language-java"><span class="pln">            </span><span class="kwd">return</span><span class="pln"> copyValueObject</span><span class="pun">((</span><span class="typ">IValueObject</span><span class="pun">)</span><span class="pln"> srcBean</span><span class="pun">);</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">InstantiationException</span><span class="pln"> e</span><span class="pun">)</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">            </span><span class="kwd">throw</span><span class="pln"> </span><span class="typ">ExceptionUtils</span><span class="pun">.</span><span class="pln">toRuntimeException</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">IllegalAccessException</span><span class="pln"> e</span><span class="pun">)</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L6"><code class="language-java"><span class="pln">            </span><span class="kwd">throw</span><span class="pln"> </span><span class="typ">ExceptionUtils</span><span class="pun">.</span><span class="pln">toRuntimeException</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code class="language-java"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L0"><code class="language-java"><span class="com">     * 得到bean的真实类,也就是剥离了lazyload等AOP方面以后的类,</span></code></li><li class="L1"><code class="language-java"><span class="com">     * 比如在hibernate中就是:</span></code></li><li class="L2"><code class="language-java"><span class="com">     * return HibernateProxyHelper</span></code></li><li class="L3"><code class="language-java"><span class="com">     *          .getClassWithoutInitializingProxy(bean)</span></code></li><li class="L4"><code class="language-java"><span class="com">     */</span></code></li><li class="L5"><code class="language-java"><span class="pln">    </span><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">abstract</span><span class="pln"> </span><span class="typ">Class</span><span class="pln"> getRealClass</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> bean</span><span class="pun">);</span></code></li><li class="L6"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">IValueObject</span><span class="pln"> copyValueObject</span><span class="pun">(</span><span class="typ">IValueObject</span><span class="pln"> srcVO</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Selectors</span><span class="pln"> </span></code></li><li class="L7"><code class="language-java"><span class="pln">            selectors</span><span class="pun">)</span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">InstantiationException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IllegalAccessException</span></code></li><li class="L8"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="typ">Class</span><span class="pln"> destClass </span><span class="pun">=</span><span class="pln"> getRealClass</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">);</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="typ">IValueObject</span><span class="pln"> newBean </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">IValueObject</span><span class="pun">)</span><span class="pln"> destClass</span><span class="pun">.</span><span class="pln">newInstance</span><span class="pun">();</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="typ">EntityModelInfo</span><span class="pln"> eInfo </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ServerMetaDataLoaderFactory</span><span class="pun">.</span><span class="pln">getLoader</span><span class="pun">()</span></code></li><li class="L2"><code class="language-java"><span class="pln">                </span><span class="pun">.</span><span class="pln">loadEntityByVOClass</span><span class="pun">(</span><span class="pln">destClass</span><span class="pun">);</span></code></li><li class="L3"><code class="language-java"><span class="pln">        </span><span class="typ">List</span><span class="pln"> fields </span><span class="pun">=</span><span class="pln"> eInfo</span><span class="pun">.</span><span class="pln">getFields</span><span class="pun">();</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> n </span><span class="pun">=</span><span class="pln"> fields</span><span class="pun">.</span><span class="pln">size</span><span class="pun">();</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L6"><code class="language-java"><span class="pln">            </span><span class="typ">EntityFieldModelInfo</span><span class="pln"> fInfo </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">EntityFieldModelInfo</span><span class="pun">)</span><span class="pln"> fields</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span></code></li><li class="L7"><code class="language-java"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">fInfo</span><span class="pun">.</span><span class="pln">isLinkProperty</span><span class="pun">())</span></code></li><li class="L8"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">                </span><span class="typ">Object</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span><span class="pln"> </span></code></li><li class="L0"><code class="language-java"><span class="pln">                        fInfo</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">());</span></code></li><li class="L1"><code class="language-java"><span class="pln">                </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="pln">newBean</span><span class="pun">,</span><span class="pln"> fInfo</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">(),</span><span class="pln"> value</span><span class="pun">);</span></code></li><li class="L2"><code class="language-java"><span class="pln">            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">selectors </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span></code></li><li class="L3"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L4"><code class="language-java"><span class="pln">                </span><span class="typ">Selectors</span><span class="pln"> subSelector </span><span class="pun">=</span><span class="pln"> selectors</span><span class="pun">.</span><span class="pln">generateSubSelectors</span></code></li><li class="L5"><code class="language-java"><span class="pln">                                        </span><span class="pun">(</span><span class="pln">fInfo</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">());</span></code></li><li class="L6"><code class="language-java"><span class="pln">                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">fInfo</span><span class="pun">.</span><span class="pln">getLinkType</span><span class="pun">().</span><span class="pln">equals</span><span class="pun">(</span><span class="typ">LinkTypeEnum</span><span class="pun">.</span><span class="pln">ONETOMANY</span><span class="pun">)</span></code></li><li class="L7"><code class="language-java"><span class="pln">                        </span><span class="pun">&amp;&amp;</span><span class="pln"> selectors</span><span class="pun">.</span><span class="pln">contains</span><span class="pun">(</span><span class="pln">fInfo</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">()))</span></code></li><li class="L8"><code class="language-java"><span class="pln">                </span><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">                    </span><span class="com">//TODO:支持其他集合属性,比如List</span></code></li><li class="L0"><code class="language-java"><span class="pln">                    </span><span class="typ">Set</span><span class="pln"> valueSet </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashSet</span><span class="pun">();</span></code></li><li class="L1"><code class="language-java"><span class="pln">                    </span><span class="typ">Set</span><span class="pln"> oldSet </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Set</span><span class="pun">)</span><span class="pln"> </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span><span class="pln"> fInfo</span></code></li><li class="L2"><code class="language-java"><span class="pln">                            </span><span class="pun">.</span><span class="pln">getName</span><span class="pun">());</span></code></li><li class="L3"><code class="language-java"><span class="pln">                    </span><span class="typ">Iterator</span><span class="pln"> oldIt </span><span class="pun">=</span><span class="pln"> oldSet</span><span class="pun">.</span><span class="pln">iterator</span><span class="pun">();</span></code></li><li class="L4"><code class="language-java"><span class="pln">                    </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">oldIt</span><span class="pun">.</span><span class="pln">hasNext</span><span class="pun">())</span></code></li><li class="L5"><code class="language-java"><span class="pln">                    </span><span class="pun">{</span></code></li><li class="L6"><code class="language-java"><span class="pln">                        </span><span class="typ">IValueObject</span><span class="pln"> oldValue </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">IValueObject</span><span class="pun">)</span><span class="pln"> oldIt</span><span class="pun">.</span><span class="pln">next</span><span class="pun">();</span></code></li><li class="L7"><code class="language-java"><span class="pln">                        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">oldValue </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span></code></li><li class="L8"><code class="language-java"><span class="pln">                        </span><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">                            </span><span class="typ">IValueObject</span><span class="pln"> obj </span><span class="pun">=</span><span class="pln"> copyValueObject</span><span class="pun">(</span><span class="pln">oldValue</span><span class="pun">,</span></code></li><li class="L0"><code class="language-java"><span class="pln">                                    subSelector</span><span class="pun">);</span></code></li><li class="L1"><code class="language-java"><span class="pln">                            valueSet</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="pln">obj</span><span class="pun">);</span></code></li><li class="L2"><code class="language-java"><span class="pln">                        </span><span class="pun">}</span></code></li><li class="L3"><code class="language-java"><span class="pln">                    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-java"><span class="pln">                    </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="pln">newBean</span><span class="pun">,</span><span class="pln"> fInfo</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">(),</span><span class="pln"> </span></code></li><li class="L5"><code class="language-java"><span class="pln">                                valueSet</span><span class="pun">);</span></code></li><li class="L6"><code class="language-java"><span class="pln">                </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">selectors</span><span class="pun">.</span><span class="pln">contains</span><span class="pun">(</span><span class="pln">fInfo</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">()))</span></code></li><li class="L7"><code class="language-java"><span class="pln">                </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">                    </span><span class="typ">Object</span><span class="pln"> oldVO </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PropertyUtils</span></code></li><li class="L9"><code class="language-java"><span class="pln">                            </span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span><span class="pln"> fInfo</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">());</span></code></li><li class="L0"><code class="language-java"><span class="pln">                    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">oldVO </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span></code></li><li class="L1"><code class="language-java"><span class="pln">                    </span><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">                        </span><span class="typ">IValueObject</span><span class="pln"> obj </span><span class="pun">=</span><span class="pln"> copyValueObject</span><span class="pun">(</span></code></li><li class="L3"><code class="language-java"><span class="pln">                                </span><span class="pun">(</span><span class="typ">IValueObject</span><span class="pun">)</span><span class="pln"> oldVO</span><span class="pun">,</span><span class="pln"> subSelector</span><span class="pun">);</span></code></li><li class="L4"><code class="language-java"><span class="pln">                        </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="pln">newBean</span><span class="pun">,</span><span class="pln"> fInfo</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">(),</span><span class="pln"> </span></code></li><li class="L5"><code class="language-java"><span class="pln">                                    obj</span><span class="pun">);</span></code></li><li class="L6"><code class="language-java"><span class="pln">                    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-java"><span class="pln">                </span><span class="pun">}</span></code></li><li class="L8"><code class="language-java"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> newBean</span><span class="pun">;</span></code></li><li class="L1"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">IValueObject</span><span class="pln"> copyValueObject</span><span class="pun">(</span><span class="typ">IValueObject</span><span class="pln"> srcVO</span><span class="pun">)</span></code></li><li class="L3"><code class="language-java"><span class="pln">            </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">InstantiationException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IllegalAccessException</span></code></li><li class="L4"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="typ">Class</span><span class="pln"> destClass </span><span class="pun">=</span><span class="pln"> getRealClass</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">);</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="typ">IValueObject</span><span class="pln"> newBean </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">IValueObject</span><span class="pun">)</span><span class="pln"> destClass</span><span class="pun">.</span><span class="pln">newInstance</span><span class="pun">();</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="typ">EntityModelInfo</span><span class="pln"> eInfo </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ServerMetaDataLoaderFactory</span><span class="pun">.</span><span class="pln">getLoader</span><span class="pun">()</span></code></li><li class="L8"><code class="language-java"><span class="pln">                </span><span class="pun">.</span><span class="pln">loadEntityByVOClass</span><span class="pun">(</span><span class="pln">destClass</span><span class="pun">);</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="typ">List</span><span class="pln"> fields </span><span class="pun">=</span><span class="pln"> eInfo</span><span class="pun">.</span><span class="pln">getFields</span><span class="pun">();</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> n </span><span class="pun">=</span><span class="pln"> fields</span><span class="pun">.</span><span class="pln">size</span><span class="pun">();</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">            </span><span class="typ">EntityFieldModelInfo</span><span class="pln"> fInfo </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">EntityFieldModelInfo</span><span class="pun">)</span><span class="pln"> </span></code></li><li class="L3"><code class="language-java"><span class="pln">                                                        fields</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span></code></li><li class="L4"><code class="language-java"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">fInfo</span><span class="pun">.</span><span class="pln">isLinkProperty</span><span class="pun">())</span></code></li><li class="L5"><code class="language-java"><span class="pln">            </span><span class="pun">{</span></code></li><li class="L6"><code class="language-java"><span class="pln">                </span><span class="typ">Object</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="pln">srcVO</span><span class="pun">,</span><span class="pln"> </span></code></li><li class="L7"><code class="language-java"><span class="pln">                                                        fInfo</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">());</span></code></li><li class="L8"><code class="language-java"><span class="pln">                </span><span class="typ">PropertyUtils</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="pln">newBean</span><span class="pun">,</span><span class="pln"> fInfo</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">(),</span><span class="pln"> value</span><span class="pun">);</span></code></li><li class="L9"><code class="language-java"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> newBean</span><span class="pun">;</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">在CommonDTOGenerator中将getRealClass方法设为抽象方法等待子类实现。在copyValueObject方法中目前支持的集合类型仅支持Set类型的属性，以后可以增加对List、Map、数组等类型的支持。</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 20.6pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">如果规定DTO类名为实体Bean类名加“DTO”，就可以编写下面的EJBDTOGenerator：</p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">EJBDTOGenerator</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">CommonDTOGenerator</span></code></li><li class="L1"><code class="language-java"><span class="pun">{</span></code></li><li class="L2"><code class="language-java"><span class="pln">    </span><span class="kwd">protected</span><span class="pln"> </span><span class="typ">Class</span><span class="pln"> getRealClass</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> bean</span><span class="pun">)</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="typ">String</span><span class="pln"> entityBeanClassName </span><span class="pun">=</span><span class="pln"> bean</span><span class="pun">.</span><span class="pln">getClass</span><span class="pun">().</span><span class="pln">getName</span><span class="pun">();</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="typ">String</span><span class="pln"> dtoClassName </span><span class="pun">=</span><span class="pln"> entityBeanClassName </span><span class="pun">+</span><span class="pln"> </span><span class="str">"DTO"</span><span class="pun">;</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="kwd">try</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">            </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Class</span><span class="pun">.</span><span class="pln">forName</span><span class="pun">(</span><span class="pln">dtoClassName</span><span class="pun">);</span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">ClassNotFoundException</span><span class="pln"> e</span><span class="pun">)</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="pun">{</span></code></li><li class="L1"><code class="language-java"><span class="pln">            </span><span class="kwd">throw</span><span class="pln"> </span><span class="typ">ExceptionUtils</span><span class="pun">.</span><span class="pln">toRuntimeException</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span></code></li><li class="L2"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L3"><code class="language-java"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></p><p style="margin: 5px auto; padding: 0px; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; text-indent: 21pt; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 18px; background-color: rgb(255, 255, 255);">采用案例系统的元数据来实现DTOGenerator就可以保证不依赖于具体ORM，这就是元数据的好处，坏处就是这个EJBDTOGenerator是无法将案例系统的元数据机制剥离的。<br></p><div style="color:gray"><small>来源：&nbsp;<a href="http://blog.csdn.net/dchjmichael/article/details/7905766">http://blog.csdn.net/dchjmichael/article/details/7905766</a></small></div><p></p></body></html>