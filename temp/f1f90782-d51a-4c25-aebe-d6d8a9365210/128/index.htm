<!DOCTYPE HTML><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=unicode">
<title>ArrayList 与linkList学习</title>
    <!--mark |wiz_custom_css| for wizeditor replace it-->
<link rel="stylesheet"  name="wiz_tmp_editor_style" href="index_files/fonts_56.css"><link type="text/css" rel="stylesheet" id="wiz_code_highlight_link" href="index_files/wiz_code_highlight_12.css"><style id="wiz_custom_css">html, body {            font-size: 15px;        }        body {            font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;            line-height: 1.6;            margin: 0;            padding: 20px 15px;            padding: 1.33rem 1rem;        }        h1, h2, h3, h4, h5, h6 {            margin: 20px 0 10px;            margin: 1.33rem 0 0.667rem;            padding: 0;            font-weight: bold;        }        h1 {            font-size: 21px;            font-size: 1.4rem;        }        h2 {            font-size: 20px;            font-size: 1.33rem;        }        h3 {            font-size: 18px;            font-size: 1.2rem;        }        h4 {            font-size: 17px;            font-size: 1.13rem;        }        h5 {            font-size: 15px;            font-size: 1rem;        }        h6 {            font-size: 15px;            font-size: 1rem;            color: #777777;            margin: 1rem 0;        }        div, p, ul, ol, dl, li {            margin: 0;        }        blockquote, table, pre, code {            margin: 8px 0;        }        ul, ol {            padding-left: 32px;            padding-left: 2.13rem;        }        blockquote {            padding: 0 12px;            padding: 0 0.8rem;        }        blockquote > :first-child {            margin-top: 0;        }        blockquote > :last-child {            margin-bottom: 0;        }        img {            border: 0;            max-width: 100%;            height: auto !important;            margin: 2px 0;        }        table {            border-collapse: collapse;            border: 1px solid #bbbbbb;        }        td, th {            padding: 4px 8px;            border-collapse: collapse;            border: 1px solid #bbbbbb;			        }        @media only screen and (-webkit-max-device-width: 1024px), only screen and (-o-max-device-width: 1024px), only screen and (max-device-width: 1024px), only screen and (-webkit-min-device-pixel-ratio: 3), only screen and (-o-min-device-pixel-ratio: 3), only screen and (min-device-pixel-ratio: 3) {            html, body {                font-size: 17px;            }            body {                line-height: 1.7;                padding: 0.75rem 0.9375rem;                color: #353c47;            }            h1 {                font-size: 2.125rem;            }            h2 {                font-size: 1.875rem;            }            h3 {                font-size: 1.625rem;            }            h4 {                font-size: 1.375rem;            }            h5 {                font-size: 1.125rem;            }            h6 {                color: inherit;            }            ul, ol {                padding-left: 2.5rem;            }            blockquote {                padding: 0 0.9375rem;            }        }</style><style id="wiz_tmp_editor_style" wiz_style= "unsave">html, body {    font-size: 15px;}body {    font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;    line-height: 1.6;    color: ;    background-color: ;    margin: 0;    padding: 20px 15px;    padding: 1.33rem 1rem;}img{    max-width: 100%;}</style><script type="text/javascript" src="file:///D:\WizNote\WizTools\htmleditor\utils.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///D:\WizNote\WizTools\htmleditor\localize.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///D:\WizNote\WizTools\htmleditor\core\wizEditorForPc.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///D:\WizNote\WizTools\htmleditor\editorHelper.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///D:\Wizs\templates\WizTemplate.js" wiz_style="unsave" charset="utf-8"></script></head>

<body spellcheck="false" ><p>一、区别：</p><p>1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。</p><p>&nbsp;2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。</p><p>&nbsp;3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。</p><p><br></p><p>二、get数据方式</p><p>1、ArrayList:内部实现是基于基础的对象数组，因此使用get方法访问列表中的任意一个元素时，它的速度要比LinkedList快。</p><p>2、LinkedList:按照顺序从列表的一段开始检查，直到另外一端。对LinkedList而言，访问列表中的某个指定元素没有更快的方法。</p><p><br></p><p>三、add添加数据</p><p>1、ArrayList:<span style="font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; orphans: 2; text-indent: 28px; widows: 2; line-height: 1.6; background-color: rgb(255, 255, 255);">当一个元素被加到ArrayList的最开端时，所有已经存在的元素都会后移，这就意味着数据移动和复制上的开销。：增加元素的开销与ArrayList的大小成正比。</span></p><p><span style="font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; orphans: 2; text-indent: 28px; widows: 2; line-height: 1.6; background-color: rgb(255, 255, 255);">2、LinkedList:</span><span style="font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; orphans: 2; text-indent: 28px; widows: 2; line-height: 1.6; background-color: rgb(255, 255, 255);">将一个元素加到LinkedList的最开端只是简单的未这个元素分配一个记录，然后调整两个连接。:增加元素的开销是固定的</span></p><p><br></p><p><br></p><p>四、空间复杂度</p><p>LinkedList中有一个私有内部类</p><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Entry</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span></code></li><li class="L1"><code class="language-java"><span class="pln">         </span><span class="typ">Object</span><span class="pln"> element</span><span class="pun">;</span><span class="pln"> </span></code></li><li class="L2"><code class="language-java"><span class="pln">         </span><span class="typ">Entry</span><span class="pln"> next</span><span class="pun">;</span><span class="pln"> </span></code></li><li class="L3"><code class="language-java"><span class="pln">         </span><span class="typ">Entry</span><span class="pln"> previous</span><span class="pun">;</span><span class="pln"> </span></code></li><li class="L4"><code class="language-java"><span class="pun">}</span></code></li></ol></pre></div><div>每个Entry对象reference列表中的一个元素，同时还有在LinkedList中它的上一个元素和下一个元素。拥有1000个元素的LinkedList对象将有1000个链接在一起的Entry对象，每个对象都对应列表中的一个元素，在LinkedList结构中将有一个很大的空间开销，因为它要存储1000个Entiry对象的相关信息。</div><div>Arraylist使用的是一个那只的数组来储存元素，这个数组的起始容量是10，当数组需要增长时，新的容量公式：<span style="font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; orphans: 2; text-indent: 28px; widows: 2; line-height: 1.6; background-color: rgb(255, 255, 255);"><font color="#ff0000">新容量=(旧容量*3)/2+1</font>，也就是说每一次容量大概会增长50%，若包含大量元素的arrayList对象最终将有很大的空间会被浪费掉，这个良妃是由ArrayList的工作方式本身造成的，若没有足够的空间来存放新的元素，数组将不得不背重新进行分配以便能够增加新的元素。对数组进行重新分配，将会导致性能下降。若事先已经知道ArrayList将会由多少个元素，可以通过构造方法来指定容量，同样可以通过trimToSize方法在ArrayList分配远比之后去掉浪费的空间。</span></div><div><span style="font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; orphans: 2; text-indent: 28px; widows: 2; line-height: 1.6; background-color: rgb(255, 255, 255);"><br></span></div><div><span style="font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; orphans: 2; text-indent: 28px; widows: 2; line-height: 1.6; background-color: rgb(255, 255, 255);"><br></span></div><div>ArrayList源码学习：</div><div>arrayList.add(object o):</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="pln"> </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">transient</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">[]</span><span class="pln"> elementData</span><span class="pun">;</span></code></li><li class="L1"><code class="language-java"><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> MAX_ARRAY_SIZE </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Integer</span><span class="pun">.</span><span class="pln">MAX_VALUE </span><span class="pun">-</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span></code></li><li class="L1"><code class="language-java"><span class="pun"><font color="#000000">private static final int MAX_VALUE =0x7fffffff; // 2^31-1 　最大的int数值</font></span></code></li><li class="L1"><font color="#000000">private static final Object[] EMPTY_ELEMENTDATA ={};</font></li><li class="L1"><code class="language-java"><span class="pun"><font color="#000000">//构造函数</font></span></code></li><li class="L1"><code class="language-java"><span class="pun"><font color="#000000">public ArrayList(){</font></span></code></li><li class="L1"><code class="language-java"><span class="pun"><font color="#000000"> &nbsp; &nbsp;super();<br></font></span></code></li><li class="L1"><code class="language-java"><span class="pun"><font color="#000000"> &nbsp; &nbsp;this.elementData = EMPTY_ELEMENTDATA;<br></font></span></code></li><li class="L1"><code class="language-java"><span class="pun"><font color="#000000">}</font></span></code></li><li class="L1"><code class="language-java"><span class="pun"><font color="#000000">public ArrayList(Collection&lt;? extends E&gt; c){</font></span></code></li><li class="L1"><code class="language-java"><span class="pun"><font color="#000000"> &nbsp; &nbsp;elementData = c.toArray();<br></font></span></code></li><li class="L1"><code class="language-java"><span class="pun"><font color="#000000"> &nbsp; &nbsp;size = elementData.length;</font></span></code></li><li class="L1"><code class="language-java"><span class="pun"><font color="#000000"> &nbsp; &nbsp;if(elementData.getClass()!=Object[].class){</font></span></code></li><li class="L1"><span style="color: rgb(0, 0, 0); font-size: 13px;">&nbsp;</span> &nbsp; &nbsp; &nbsp; <font color="#000000">elementData = Arrays.copyOf(elementData,size,Object[].class);</font></li><li class="L1"><span style="color: rgb(0, 0, 0); font-size: 13px;">    }</span></li><li class="L1"><code class="language-java"><span class="pun"><font color="#000000">}</font></span></code></li><li class="L2"><code class="language-java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> add</span><span class="pun">(</span><span class="pln">E e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">        ensureCapacityInternal</span><span class="pun">(</span><span class="pln">size </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">  </span><span class="com">// Increments modCount!!</span></code></li><li class="L4"><code class="language-java"><span class="pln">        elementData</span><span class="pun">[</span><span class="pln">size</span><span class="pun">++]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> e</span><span class="pun">;</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span></code></li><li class="L6"><code class="language-java"><span class="pun">}</span></code></li><li class="L7"><code class="language-java"><span class="kwd">private</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> ensureCapacityInternal</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> minCapacity</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">elementData </span><span class="pun">==</span><span class="pln"> EMPTY_ELEMENTDATA</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-java"><span class="pln">            minCapacity </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="pln">max</span><span class="pun">(</span><span class="pln">DEFAULT_CAPACITY</span><span class="pun">,</span><span class="pln"> minCapacity</span><span class="pun">);</span></code></li><li class="L0"><code class="language-java"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L1"><code class="language-java"></code></li><li class="L2"><code class="language-java"><span class="pln">        ensureExplicitCapacity</span><span class="pun">(</span><span class="pln">minCapacity</span><span class="pun">);</span></code></li><li class="L3"><code class="language-java"><span class="pun">}</span></code></li><li class="L4"><code class="language-java"><span class="pln"> </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> ensureExplicitCapacity</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> minCapacity</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-java"><span class="pln">        modCount</span><span class="pun">++;</span></code></li><li class="L6"><code class="language-java"></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="com">// overflow-conscious code</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">minCapacity </span><span class="pun">-</span><span class="pln"> elementData</span><span class="pun">.</span><span class="pln">length </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L9"><code class="language-java"><span class="pln">            grow</span><span class="pun">(</span><span class="pln">minCapacity</span><span class="pun">);</span></code></li><li class="L0"><code class="language-java"><span class="pun">}</span></code></li><li class="L1"><code class="language-java"></code></li><li class="L2"><code class="language-java"><span class="pln"> </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> grow</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> minCapacity</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-java"><span class="pln">        </span><span class="com">// overflow-conscious code</span></code></li><li class="L4"><code class="language-java"><span class="pln">        </span><span class="kwd">int</span><span class="pln"> oldCapacity </span><span class="pun">=</span><span class="pln"> elementData</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span></code></li><li class="L5"><code class="language-java"><span class="pln">        </span><span class="com">// &gt;&gt;1 除以2</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="kwd">int</span><span class="pln"> newCapacity </span><span class="pun">=</span><span class="pln"> oldCapacity </span><span class="pun">+</span><span class="pln"> </span><span class="pun">(</span><span class="pln">oldCapacity </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L7"><code class="language-java"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">newCapacity </span><span class="pun">-</span><span class="pln"> minCapacity </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L8"><code class="language-java"><span class="pln">            newCapacity </span><span class="pun">=</span><span class="pln"> minCapacity</span><span class="pun">;</span></code></li><li class="L8"><code class="language-java"><span class="pun"> &nbsp; &nbsp; &nbsp; &nbsp;//若新的容器大小大于int最大的容器值<br></span></code></li><li class="L9"><code class="language-java"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">newCapacity </span><span class="pun">-</span><span class="pln"> MAX_ARRAY_SIZE </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L0"><code class="language-java"><span class="pln">            newCapacity </span><span class="pun">=</span><span class="pln"> hugeCapacity</span><span class="pun">(</span><span class="pln">minCapacity</span><span class="pun">);</span></code></li><li class="L1"><code class="language-java"><span class="pln">        </span><span class="com">// minCapacity is usually close to size, so this is a win:</span></code></li><li class="L1"><code class="language-java"><span class="com">        //将旧的值复制到新的容器里去（数据多时拷贝过程耗时）</span></code></li><li class="L2"><code class="language-java"><span class="pln">        elementData </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Arrays</span><span class="pun">.</span><span class="pln">copyOf</span><span class="pun">(</span><span class="pln">elementData</span><span class="pun">,</span><span class="pln"> newCapacity</span><span class="pun">);</span></code></li><li class="L3"><code class="language-java"><span class="pun">}</span></code></li><li class="L4"><code class="language-java"></code></li><li class="L5"><br></li><li class="L5"><code class="language-java"><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> hugeCapacity</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> minCapacity</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-java"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">minCapacity </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="com">// overflow</span></code></li><li class="L7"><code class="language-java"><span class="pln">            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">OutOfMemoryError</span><span class="pun">();</span></code></li><li class="L8"><code class="language-java"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">minCapacity </span><span class="pun">&gt;</span><span class="pln"> MAX_ARRAY_SIZE</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?</span></code></li><li class="L9"><code class="language-java"><span class="pln">            </span><span class="typ">Integer</span><span class="pun">.</span><span class="pln">MAX_VALUE </span><span class="pun">:</span></code></li><li class="L0"><code class="language-java"><span class="pln">            MAX_ARRAY_SIZE</span><span class="pun">;</span></code></li><li class="L1"><code class="language-java"><span class="pln"> </span><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div></body></html>